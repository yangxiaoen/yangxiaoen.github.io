<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨小恩同学的博客</title>
  
  <subtitle>一个专注技术学习的小白</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-10T13:57:44.785Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨小恩</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>先序遍历构建二叉树</title>
    <link href="http://yoursite.com/2019/11/10/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2019/11/10/先序遍历构建二叉树/</id>
    <published>2019-11-10T13:57:44.784Z</published>
    <updated>2019-11-10T13:57:44.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先序遍历构造二叉树"><a href="#先序遍历构造二叉树" class="headerlink" title="先序遍历构造二叉树"></a>先序遍历构造二叉树</h3><p>返回与给定先序遍历 preorder 相匹配的二叉搜索树（binary search tree）的根结点。</p><p>(回想一下，二叉搜索树是二叉树的一种，其每个节点都满足以下规则，对于<code>node.left</code> 的任何后代，值总 <code>&lt; node.val</code>，而 <code>node.right</code> 的任何后代，值总<code>&gt; node.val</code>。此外，先序遍历首先显示节点的值，然后遍历 <code>node.left</code>，接着遍历 <code>node.right</code>。）</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：[8,5,1,7,10,12]</span><br><span class="line">输出：[8,5,10,1,7,null,12]</span><br></pre></td></tr></table></figure><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8ta7z9iwqj30ge0aqdgf.jpg" alt="示意图"></p><p>提示：<br><code>1 &lt;= preorder.length &lt;= 100</code><br>先序<code>preorder</code> 中的值是不同的。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>构建二叉树，如果根节点为空，则根结点的值为要插入的值，并将其左右子树置为空，如果要插入的结点值比根节点值大，则在右子树中调用插入结点的方法，反之在左子树中调用这个插入结点的函数。<br>使用<code>for</code>循环，依次传递要插入的结点。利用循环与递归实现先序遍历构造二叉树</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct TreeNode *left;</span><br><span class="line"> *     struct TreeNode *right;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">struct TreeNode* add(struct TreeNode* root, int num)</span><br><span class="line">&#123;</span><br><span class="line">    if(root == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        root = (struct TreeNode*)malloc(sizeof(struct TreeNode));</span><br><span class="line">        root-&gt;val = num;</span><br><span class="line">        root-&gt;left = NULL;</span><br><span class="line">        root-&gt;right = NULL;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    if(root-&gt;val &gt; num)</span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;left = add(root-&gt;left,num);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;right = add(root-&gt;right,num);   </span><br><span class="line">    &#125; </span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct TreeNode* bstFromPreorder(int* preorder, int preorderSize)&#123;</span><br><span class="line">    struct TreeNode* root = NULL;</span><br><span class="line">    for(int i = 0; i &lt; preorderSize; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        root = add(root,preorder[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :0 ms, 在所有 c 提交中击败了100.00%的用户<br>内存消耗 :9.5 MB, 在所有 c 提交中击败了9.09%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先序遍历构造二叉树&quot;&gt;&lt;a href=&quot;#先序遍历构造二叉树&quot; class=&quot;headerlink&quot; title=&quot;先序遍历构造二叉树&quot;&gt;&lt;/a&gt;先序遍历构造二叉树&lt;/h3&gt;&lt;p&gt;返回与给定先序遍历 preorder 相匹配的二叉搜索树（binary search
      
    
    </summary>
    
    
      <category term="Leetcode二叉树" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/"/>
    
      <category term="简单" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/%E7%AE%80%E5%8D%95/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="构建二叉树" scheme="http://yoursite.com/tags/%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="简单" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>如何上传文件夹下多个文件</title>
    <link href="http://yoursite.com/2019/11/09/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/11/09/如何上传文件夹下多个文件/</id>
    <published>2019-11-09T14:21:16.918Z</published>
    <updated>2019-11-09T14:21:16.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何上传文件夹下多个文件"><a href="#如何上传文件夹下多个文件" class="headerlink" title="如何上传文件夹下多个文件"></a>如何上传文件夹下多个文件</h3><ol><li>进入git项目的本地文件夹，将自己的项目复制到这个git 文件夹，查看状态，提交所有的新文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status </span><br><span class="line">git add -A</span><br><span class="line">git commit -a -m&quot;first commit&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>上传更新到git 版本库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><p>注：<code>git add</code>上传本地项目所有变化的命令三种有<code>git add -A</code>、<code>git add -u</code>、<code>git add</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A  提交所有变化</span><br><span class="line">git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</span><br><span class="line">git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何上传文件夹下多个文件&quot;&gt;&lt;a href=&quot;#如何上传文件夹下多个文件&quot; class=&quot;headerlink&quot; title=&quot;如何上传文件夹下多个文件&quot;&gt;&lt;/a&gt;如何上传文件夹下多个文件&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;进入git项目的本地文件夹，将自己的项目复制到这
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="小技巧" scheme="http://yoursite.com/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="上传" scheme="http://yoursite.com/tags/%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树</title>
    <link href="http://yoursite.com/2019/11/09/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2019/11/09/平衡二叉树/</id>
    <published>2019-11-09T14:11:07.573Z</published>
    <updated>2019-11-09T14:11:07.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</p></blockquote><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">给定二叉树 [3,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br></pre></td></tr></table></figure><p>返回 true 。</p><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定二叉树 [1,2,2,3,3,null,null,4,4]</span><br><span class="line"></span><br><span class="line">       1</span><br><span class="line">      / \</span><br><span class="line">     2   2</span><br><span class="line">    / \</span><br><span class="line">   3   3</span><br><span class="line">  / \</span><br><span class="line"> 4   4</span><br></pre></td></tr></table></figure><p>返回 false 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/balanced-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/balanced-binary-tree</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>使用递归完成，分别获取左子树与右子树的高度，求左子树减去右子树的绝对值，如果大于一则一直返回 -1 ， -1表示这棵树已经失去平衡了。</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int balance(struct TreeNode* root)&#123;</span><br><span class="line">    if(root == NULL)</span><br><span class="line">        return 0;</span><br><span class="line">    int left = balance(root-&gt;left); //left表示左子树的高度</span><br><span class="line">    if(left == -1)</span><br><span class="line">        return -1;</span><br><span class="line">    int right = balance(root-&gt;right);// right表示右子树的高度</span><br><span class="line">    if(right == -1)</span><br><span class="line">        return -1;</span><br><span class="line">    if(abs(left - right) &gt; 1) //-1 用来表示已经产生不平衡了</span><br><span class="line">        return -1;</span><br><span class="line">    return (left &gt; right ? left : right) + 1;</span><br><span class="line">&#125;</span><br><span class="line">bool isBalanced(struct TreeNode* root) &#123;</span><br><span class="line">    return balance(root) != -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :16 ms, 在所有 c 提交中击败了51.56%的用户<br>内存消耗 :10.2 MB, 在所有 c 提交中击败了100.00%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;平衡二叉树&quot;&gt;&lt;a href=&quot;#平衡二叉树&quot; class=&quot;headerlink&quot; title=&quot;平衡二叉树&quot;&gt;&lt;/a&gt;平衡二叉树&lt;/h3&gt;&lt;p&gt;给定一个二叉树，判断它是否是高度平衡的二叉树。&lt;/p&gt;
&lt;p&gt;本题中，一棵高度平衡二叉树定义为：&lt;/p&gt;
&lt;bloc
      
    
    </summary>
    
    
      <category term="Leetcode二叉树" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/"/>
    
      <category term="简单" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/%E7%AE%80%E5%8D%95/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="简单" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="平衡二叉树" scheme="http://yoursite.com/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的中序遍历</title>
    <link href="http://yoursite.com/2019/11/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/11/08/二叉树的中序遍历/</id>
    <published>2019-11-08T13:56:03.979Z</published>
    <updated>2019-11-08T13:56:03.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h3><p>给定一个二叉树，返回它的中序 遍历。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">输出: [1,3,2]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-inorder-traversal</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用递归，根据中序遍历的规则，先访问左子树，再访问根节点，最后是右子树。创建一个动态链表用来记录遍历的节点。注意调用函数时传的参数。</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void inorderTravel(struct TreeNode* root,int *result,int *rSize)</span><br><span class="line">&#123;</span><br><span class="line">    if(!root)</span><br><span class="line">        return ;</span><br><span class="line">    inorderTravel(root-&gt;left, result, rSize);</span><br><span class="line">    result[*rSize] = root-&gt;val;</span><br><span class="line">    ++(*rSize);</span><br><span class="line">    inorderTravel(root-&gt;right, result, rSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* inorderTraversal(struct TreeNode* root, int* returnSize)&#123;</span><br><span class="line">    int *result = (int*) malloc (sizeof(int)*1000);</span><br><span class="line">    int rSize = 0;</span><br><span class="line">    inorderTravel(root, result, &amp;rSize);</span><br><span class="line">    *returnSize = rSize;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :4 ms, 在所有 c 提交中击败了71.25%的用户<br>内存消耗 :7.4 MB, 在所有 c 提交中击败了90.51%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二叉树的中序遍历&quot;&gt;&lt;a href=&quot;#二叉树的中序遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的中序遍历&quot;&gt;&lt;/a&gt;二叉树的中序遍历&lt;/h3&gt;&lt;p&gt;给定一个二叉树，返回它的中序 遍历。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
      <category term="Leetcode二叉树" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/%E4%B8%AD%E7%AD%89/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="http://yoursite.com/tags/%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的后序遍历</title>
    <link href="http://yoursite.com/2019/11/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/11/08/二叉树的后序遍历/</id>
    <published>2019-11-08T13:47:34.828Z</published>
    <updated>2019-11-08T13:47:34.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h3><p>给定一个二叉树，返回它的 后序 遍历。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [3,2,1]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-postorder-traversal</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用递归，根据后序遍历的规则，先访问左子树，在访问右子树，最后是根节点。创建一个动态链表用来记录遍历的节点。注意调用函数时传的参数。</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void postorderTravel(struct TreeNode* root, int * result, int *rSize)</span><br><span class="line">&#123;</span><br><span class="line">    if(!root)</span><br><span class="line">        return ;</span><br><span class="line">    postorderTravel(root-&gt;left, result, rSize);</span><br><span class="line">    postorderTravel(root-&gt;right, result, rSize);</span><br><span class="line">    result[*rSize] = root-&gt;val;</span><br><span class="line">    ++(*rSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* postorderTraversal(struct TreeNode* root, int* returnSize)&#123;</span><br><span class="line">    int *result = (int*)malloc(sizeof(int)*1000);</span><br><span class="line">    int rSize = 0;</span><br><span class="line">    postorderTravel(root, result, &amp;rSize);</span><br><span class="line">    * returnSize = rSize;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :4 ms, 在所有 c 提交中击败了74.30%的用户<br>内存消耗 :7.4 MB, 在所有 c 提交中击败了84.62%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二叉树的后序遍历&quot;&gt;&lt;a href=&quot;#二叉树的后序遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的后序遍历&quot;&gt;&lt;/a&gt;二叉树的后序遍历&lt;/h3&gt;&lt;p&gt;给定一个二叉树，返回它的 后序 遍历。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
      <category term="Leetcode二叉树" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/%E4%B8%AD%E7%AD%89/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="http://yoursite.com/tags/%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="http://yoursite.com/2019/11/07/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/11/07/反转链表/</id>
    <published>2019-11-07T14:54:10.248Z</published>
    <updated>2019-11-07T14:54:10.250Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><p>反转一个单链表。<br>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>运用递归，如果传入的是空链表返回空链表，</p><h4 id="完整代码（一）"><a href="#完整代码（一）" class="headerlink" title="完整代码（一）"></a>完整代码（一）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    if (head == NULL)</span><br><span class="line">        return NULL;</span><br><span class="line">    if (head -&gt; next == NULL)</span><br><span class="line">        return head;</span><br><span class="line">    struct ListNode *newHead = reverseList(head -&gt; next);</span><br><span class="line">    head -&gt; next -&gt; next = head;</span><br><span class="line">    head -&gt; next = NULL;</span><br><span class="line">    return newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :4 ms, 在所有 c 提交中击败了92.62%的用户<br>内存消耗 :7.6 MB, 在所有 c 提交中击败了12.47%的用户</p></blockquote><h4 id="完整代码（二）"><a href="#完整代码（二）" class="headerlink" title="完整代码（二）"></a>完整代码（二）</h4><p>在链表元素个数&gt;1的情况下，先将链表的前两个结点反转，再将后面剩余的结点逐个添加到首端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    if (head == NULL || head -&gt; next == NULL)//空链表或只有一个结点的链表</span><br><span class="line">        return head;</span><br><span class="line">    struct ListNode *p = head -&gt; next, *q = head -&gt; next -&gt; next, *t;//q从第3个结点开始，t为q的下一个结点，防止断链</span><br><span class="line"></span><br><span class="line">    p -&gt; next = head;</span><br><span class="line">    head -&gt; next = NULL;//将链表的前两个结点反转，为后面在头部逐个添加结点做准备</span><br><span class="line">    while (q)&#123;</span><br><span class="line">        t = q -&gt; next;//t指向q的下一个结点</span><br><span class="line">        q -&gt; next = p;//q连上p</span><br><span class="line">        p = q;//p指向其前一个结点（向前移动一位）</span><br><span class="line">        q = t;//q向后移动</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :4 ms, 在所有 c 提交中击败了92.62%的用户<br>内存消耗 :7.6 MB, 在所有 c 提交中击败了34.26%的用户</p></blockquote><h4 id="完整代码（三）"><a href="#完整代码（三）" class="headerlink" title="完整代码（三）"></a>完整代码（三）</h4><p>在链表元素个数&gt;1的情况下，先将链表的前两个结点反转，再将后面剩余的结点逐个添加到首端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">truct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    struct ListNode *pre = NULL, *nex;//pre表示新表的首结点，初始化为NULL,使新表尾端指向空，nex记录顺序遍历的下一结点</span><br><span class="line">    while (head)&#123;</span><br><span class="line">        nex = head -&gt; next;//记录下一结点</span><br><span class="line">        head -&gt; next = pre;//当前遍历的结点连接pre</span><br><span class="line">        pre = head;//pre指向当前结点，当前结点成为新表的首结点</span><br><span class="line">        head = nex;//指向当前结点下一结点，所以nex的作用在于辅助遍历，防止断链</span><br><span class="line">    &#125;</span><br><span class="line">    return pre;//返回新表首结点</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :4 ms, 在所有 c 提交中击败了92.62%的用户<br>内存消耗 :7.4 MB, 在所有 c 提交中击败了72.76%的用户</p></blockquote><h4 id="完整代码（四）"><a href="#完整代码（四）" class="headerlink" title="完整代码（四）"></a>完整代码（四）</h4><p>思路：第2个节点到第n个节点，依次逐节点插入到第1个节点(head节点)之后，(n-1)次这样的操作结束之后将首节点挪到新表的表尾即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    if (head == NULL || head -&gt; next == NULL)</span><br><span class="line">        return head;</span><br><span class="line">    struct ListNode *p = head -&gt; next, *q;</span><br><span class="line"></span><br><span class="line">    while (p -&gt; next != NULL)&#123;</span><br><span class="line">        q = p -&gt; next;</span><br><span class="line">        p -&gt; next = q -&gt; next;</span><br><span class="line">        q -&gt; next = head -&gt; next;</span><br><span class="line">        head -&gt; next = q;</span><br><span class="line">    &#125;</span><br><span class="line">    p -&gt; next = head;//相当于成环  </span><br><span class="line">    head = p -&gt; next -&gt; next;//新head变为原head的next  </span><br><span class="line">    p -&gt; next -&gt; next = NULL;//断掉环</span><br><span class="line"></span><br><span class="line">    return head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :8 ms, 在所有 c 提交中击败了55.66%的用户<br>内存消耗 :7.7 MB, 在所有 c 提交中击败了9.32%的用户</p></blockquote><h4 id="完整代码（五）"><a href="#完整代码（五）" class="headerlink" title="完整代码（五）"></a>完整代码（五）</h4><p>思路：第2个节点到第n个节点，依次逐节点插入到第1个节点(head节点)之后，(n-1)次这样的操作结束之后将首节点挪到新表的表尾即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    if (head == NULL || head -&gt; next == NULL)</span><br><span class="line">        return head;</span><br><span class="line">    struct ListNode *front = (struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">    front -&gt; next = head;</span><br><span class="line">    struct ListNode *tail = front -&gt; next;</span><br><span class="line">    struct ListNode *t;</span><br><span class="line">    while (tail -&gt; next)&#123;</span><br><span class="line">        t = tail -&gt; next;</span><br><span class="line">        tail -&gt; next = t -&gt; next;</span><br><span class="line">        t -&gt; next = front -&gt; next;</span><br><span class="line">        front -&gt; next = t;</span><br><span class="line">    &#125;</span><br><span class="line">    return front -&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :8 ms, 在所有 c 提交中击败了55.66%的用户<br>内存消耗 :7.6 MB, 在所有 c 提交中击败了32.45%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;反转链表&quot;&gt;&lt;a href=&quot;#反转链表&quot; class=&quot;headerlink&quot; title=&quot;反转链表&quot;&gt;&lt;/a&gt;反转链表&lt;/h3&gt;&lt;p&gt;反转一个单链表。&lt;br&gt;示例:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="Leetcode链表" scheme="http://yoursite.com/categories/Leetcode%E9%93%BE%E8%A1%A8/"/>
    
      <category term="递归" scheme="http://yoursite.com/categories/Leetcode%E9%93%BE%E8%A1%A8/%E9%80%92%E5%BD%92/"/>
    
      <category term="简单" scheme="http://yoursite.com/categories/Leetcode%E9%93%BE%E8%A1%A8/%E9%80%92%E5%BD%92/%E7%AE%80%E5%8D%95/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="简单" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的前序遍历</title>
    <link href="http://yoursite.com/2019/11/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2019/11/06/二叉树的前序遍历/</id>
    <published>2019-11-06T14:16:16.679Z</published>
    <updated>2019-11-07T14:53:05.188Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h3><p>给定一个二叉树，返回它的 前序 遍历。</p><p> 示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [1,2,3]</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-preorder-traversal</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用递归实现，思路很简单，获取根节点的值并存储，递归调用遍历左子树，然后递归调用遍历右子树，但是对于我来说，将想法转换为代码有些困难，大家直接看代码吧！</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void preorderTravel(struct TreeNode* root, int* result, int *rSize)</span><br><span class="line">&#123;</span><br><span class="line">    if(!root)</span><br><span class="line">        return;</span><br><span class="line">    result [*rSize] = root -&gt; val;</span><br><span class="line">    ++(*rSize);</span><br><span class="line">    preorderTravel(root-&gt;left, result, rSize);</span><br><span class="line">    preorderTravel(root-&gt;right, result, rSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* preorderTraversal(struct TreeNode* root, int* returnSize)&#123;</span><br><span class="line">    int *result = (int *)malloc(sizeof(int)*100);//为结果开辟存储空间</span><br><span class="line">    int rSize = 0;</span><br><span class="line">    preorderTravel(root, result, &amp;rSize);</span><br><span class="line">    * returnSize = rSize;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>感谢<strong>sfas</strong>提供代码参考</p></blockquote><blockquote><p>执行用时 :4 ms, 在所有 c 提交中击败了73.21% 的用户<br>内存消耗 :7.2 MB, 在所有 c 提交中击败了99.14%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二叉树的前序遍历&quot;&gt;&lt;a href=&quot;#二叉树的前序遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的前序遍历&quot;&gt;&lt;/a&gt;二叉树的前序遍历&lt;/h3&gt;&lt;p&gt;给定一个二叉树，返回它的 前序 遍历。&lt;/p&gt;
&lt;p&gt; 示例:&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
    
      <category term="Leetcode二叉树" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E9%80%92%E5%BD%92/%E4%B8%AD%E7%AD%89/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="http://yoursite.com/tags/%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>各位相加</title>
    <link href="http://yoursite.com/2019/11/05/%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2019/11/05/各位相加/</id>
    <published>2019-11-05T14:15:05.884Z</published>
    <updated>2019-11-05T14:15:05.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="各位相加"><a href="#各位相加" class="headerlink" title="各位相加"></a>各位相加</h3><p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 38</span><br><span class="line">输出: 2 </span><br><span class="line">解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。</span><br></pre></td></tr></table></figure><p>进阶:<br>你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-digits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-digits</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们可以使用循环依次获取到这个数字 num 的各个位置的数字，并将其相加，如果相加不是个位数，我们就递归调用这个函数</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int addDigits(int num)&#123;</span><br><span class="line">    int k = 0; //表示各个位置上数字之和</span><br><span class="line">    while(num != 0)//求出各个位置上的数字并求和</span><br><span class="line">    &#123;</span><br><span class="line">        k = k + num % 10; </span><br><span class="line">        num = num/10; </span><br><span class="line">    &#125;</span><br><span class="line">    if(k / 10 != 0)//判断各个位置上数字是否为个位数</span><br><span class="line">        return addDigits(k);</span><br><span class="line">    return k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :4 ms, 在所有 c 提交中击败了76.94% 的用户<br>内存消耗 :6.6 MB, 在所有 c 提交中击败了55.62%的用户</p></blockquote><h5 id="进阶-你可以不使用循环或者递归，且在-O-1-时间复杂度内解决这个问题吗？"><a href="#进阶-你可以不使用循环或者递归，且在-O-1-时间复杂度内解决这个问题吗？" class="headerlink" title="进阶:你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？"></a>进阶:你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</h5><p>在Leetcode的题解区 看到了一位大神的实现方法，一行代码解决问题,大致思路是这样的</p><blockquote><p>时间复杂度为O(1)的解法：<br>    除个位外，每一位上的值都是通过(9+1)进位的过程得到的，想一下拨算盘进位<br>    把整数n看成n样物品，原本是以10个1份打包的，现在从这些10个1份打包好的里面，拿出1个，让它们以9个为1份打包。<br>    这样就出现了两部分的东西：<br>        原本10个现在9个1份的，打包好的物品，这些，我们不用管<br>        零散的物品，它们还可以分成：<br>            从原来打包的里面拿出来的物品，它们的总和 =》 原来打包好的份数 =》 10进制进位的次数 =》 10进制下，除个位外其他位上的值的总和<br>            以10个为1份打包时，打不进去的零散物品 =》 10进制个位上的值<br>    如上零散物品的总数，就是第一次处理num后得到的累加值<br>    如果这个累加值&gt;9，那么如题就还需要将各个位上的值再相加，直到结果为个位数为止。也就意味着还需要来一遍如上的过程。<br>    那么按照如上的思路，似乎可以通过n % 9得到最后的值<br>    但是有1个关键的问题，如果num是9的倍数，那么就不适用上述逻辑。原本我是想得到n被打包成10个1份的份数+打不进10个1份的散落个数的和。通过与9取模，去获得那个不能整除的1，作为计算份数的方式，但是如果可以被9整除，我就无法得到那个1，也得不到个位上的数。<br>    所以需要做一下特殊处理，(num - 1) % 9 + 1<br>    可以这么做的原因：原本可以被完美分成9个为一份的n样物品，我故意去掉一个，那么就又可以回到上述逻辑中去得到我要的n被打包成10个一份的份数+打不进10个一份的散落个数的和。而这个减去的1就相当于从，在10个1份打包的时候散落的个数中借走的，本来就不影响原来10个1份打包的份数，先拿走再放回来，都只影响散落的个数，所以没有关系。</p></blockquote><p>作者：liveforexperience</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int addDigits(int num)&#123;</span><br><span class="line">    return 1 + (num - 1) % 9;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :0 ms, 在所有 c 提交中击败了100.00% 的用户<br>内存消耗 :6.8 MB, 在所有 c 提交中击败了7.69%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;各位相加&quot;&gt;&lt;a href=&quot;#各位相加&quot; class=&quot;headerlink&quot; title=&quot;各位相加&quot;&gt;&lt;/a&gt;各位相加&lt;/h3&gt;&lt;p&gt;给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
      <category term="Leetcode字符串" scheme="http://yoursite.com/categories/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="递归" scheme="http://yoursite.com/categories/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/%E9%80%92%E5%BD%92/"/>
    
      <category term="循环" scheme="http://yoursite.com/categories/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/%E9%80%92%E5%BD%92/%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="简单" scheme="http://yoursite.com/categories/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/%E9%80%92%E5%BD%92/%E5%BE%AA%E7%8E%AF/%E7%AE%80%E5%8D%95/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="简单" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>二叉搜索树中第K小的元素</title>
    <link href="http://yoursite.com/2019/11/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/11/04/二叉搜索树中第K小的元素/</id>
    <published>2019-11-04T14:22:14.786Z</published>
    <updated>2019-11-04T14:22:28.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二叉搜索树中第K小的元素"><a href="#二叉搜索树中第K小的元素" class="headerlink" title="二叉搜索树中第K小的元素"></a>二叉搜索树中第K小的元素</h3><p>给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。</p><p>说明：<br>你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: root = [3,1,4,null,2], k = 1</span><br><span class="line">   3</span><br><span class="line">  / \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: root = [5,3,6,2,4,null,null,1], k = 3</span><br><span class="line">       5</span><br><span class="line">      / \</span><br><span class="line">     3   6</span><br><span class="line">    / \</span><br><span class="line">   2   4</span><br><span class="line">  /</span><br><span class="line"> 1</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>采用二叉排序数的中序遍历，返回第k个值就好</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct TreeNode *left;</span><br><span class="line"> *     struct TreeNode *right;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">int find(struct TreeNode *root, int k, int *ans, bool *found) &#123;</span><br><span class="line">    if (*found) </span><br><span class="line">        return 0;</span><br><span class="line">    int left = root-&gt;left ? find(root-&gt;left, k, ans, found) : 0;</span><br><span class="line">    if (left == k-1) &#123;</span><br><span class="line">        *ans = root-&gt;val;</span><br><span class="line">        *found = true;</span><br><span class="line">    &#125;</span><br><span class="line">    int right = root-&gt;right ? find(root-&gt;right, k - left - 1, ans, found) : 0;</span><br><span class="line">     return  left+right+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int kthSmallest(struct TreeNode* root, int k)&#123;</span><br><span class="line">    int ans;</span><br><span class="line">    bool found = false;</span><br><span class="line">    if (root) </span><br><span class="line">        find(root, k, &amp;ans, &amp;found);</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :12 ms, 在所有 c 提交中击败了95.66%的用户<br>内存消耗 :11.5 MB, 在所有 c 提交中击败了100.00%的用户</p></blockquote><h4 id="这个题没有理解很透彻，在理解理解递归调用"><a href="#这个题没有理解很透彻，在理解理解递归调用" class="headerlink" title="这个题没有理解很透彻，在理解理解递归调用"></a>这个题没有理解很透彻，在理解理解递归调用</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二叉搜索树中第K小的元素&quot;&gt;&lt;a href=&quot;#二叉搜索树中第K小的元素&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树中第K小的元素&quot;&gt;&lt;/a&gt;二叉搜索树中第K小的元素&lt;/h3&gt;&lt;p&gt;给定一个二叉搜索树，编写一个函数 kthSmallest 来
      
    
    </summary>
    
    
      <category term="Leetcode二叉树" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="中等" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E7%AD%89/"/>
    
      <category term="递归" scheme="http://yoursite.com/categories/Leetcode%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E7%AD%89/%E9%80%92%E5%BD%92/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="中等" scheme="http://yoursite.com/tags/%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口最大值</title>
    <link href="http://yoursite.com/2019/11/03/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>http://yoursite.com/2019/11/03/滑动窗口最大值/</id>
    <published>2019-11-03T14:19:10.950Z</published>
    <updated>2019-11-03T14:24:52.326Z</updated>
    
    <content type="html"><![CDATA[<h3 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h3><p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回滑动窗口中的最大值。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3</span><br><span class="line">输出: [3,3,5,5,6,7] </span><br><span class="line">解释: </span><br><span class="line"></span><br><span class="line">  滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/sliding-window-maximum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sliding-window-maximum</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>有两种解题方法</p><ol><li>一种是每k个元素进行比较，创建一个链表将最大值输出</li><li>第二种是创建一个双端链表，将元素从队尾入队，如果后一个节点元素数值比前一个大则前一个数值移除，如果比前一个结点元素数值小，则入队。这样就能保证队列的第一个元素为当前k个数值中最大的<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8l7raet5lj30lp08y0tt.jpg" alt="henbang"><br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8l7vawonpj30j008q0tj.jpg" alt=""></li></ol><h4 id="第一种想法完整代码如下"><a href="#第一种想法完整代码如下" class="headerlink" title="第一种想法完整代码如下"></a>第一种想法完整代码如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Note: The returned array must be malloced, assume caller calls free().</span><br><span class="line"> */</span><br><span class="line">/*</span><br><span class="line">    maxInk()用于比较k个数值中最大值</span><br><span class="line">*/</span><br><span class="line">int maxInk(int *nums,int k)</span><br><span class="line">&#123;</span><br><span class="line">    int max=nums[0];</span><br><span class="line">    int i;</span><br><span class="line">    for(i = 0; i &lt; k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(nums[i] &gt; max)</span><br><span class="line">            max = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int end = numsSize - k;</span><br><span class="line">    int rsize = numsSize - k + 1;</span><br><span class="line">    if(numsSize == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        * returnSize = 0;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    * returnSize = rsize;</span><br><span class="line">    int *r = (int *)malloc(sizeof(int)*rsize);</span><br><span class="line">    memset(r,0,sizeof(int)*rsize);</span><br><span class="line">    </span><br><span class="line">    for(i = 0; i&lt;= end; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        r[i] = maxInk(nums+i,k);</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :144 ms, 在所有 c 提交中击败了40.05% 的用户<br>内存消耗 :15.9 MB, 在所有 c 提交中击败了18.18%的用户</p></blockquote><h4 id="第二种想法完整代码如下"><a href="#第二种想法完整代码如下" class="headerlink" title="第二种想法完整代码如下"></a>第二种想法完整代码如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">int *qdata;</span><br><span class="line">int head;</span><br><span class="line">int tail;</span><br><span class="line">int qlen;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line">void queue_init(Queue* q, int n)</span><br><span class="line">&#123;</span><br><span class="line">if(n&gt;=0)</span><br><span class="line">&#123;</span><br><span class="line">q-&gt;qlen = n+1;</span><br><span class="line">q-&gt;qdata = (int *)malloc(sizeof(int) *q-&gt;qlen);</span><br><span class="line">q-&gt;head = 0;</span><br><span class="line">q-&gt;tail = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void queue_destroy(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">free(q-&gt;qdata);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int queue_is_full(Queue* q)</span><br><span class="line">&#123;</span><br><span class="line">if((q-&gt;tail+1)%q-&gt;qlen == q-&gt;head) return 1;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int queue_is_empty(Queue*q )</span><br><span class="line">&#123;</span><br><span class="line">return q-&gt;head == q-&gt;tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void queue_add_tail(Queue *q, int e)</span><br><span class="line">&#123;</span><br><span class="line">if(!queue_is_full(q))</span><br><span class="line">&#123;</span><br><span class="line">q-&gt;qdata[q-&gt;tail] = e;</span><br><span class="line">q-&gt;tail = (q-&gt;tail+1)%q-&gt;qlen;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d not add, queue is full\n&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int queue_pull_head(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">if(!queue_is_empty(q))</span><br><span class="line">&#123;</span><br><span class="line">int r = q-&gt;qdata[q-&gt;head];</span><br><span class="line">q-&gt;head = (q-&gt;head+1)%q-&gt;qlen;</span><br><span class="line">return r;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;not pull, queue is empty\n&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int queue_peek_head(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">if(!queue_is_empty(q))</span><br><span class="line">return q-&gt;qdata[q-&gt;head];</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">int queue_pull_tail(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">    int r = q-&gt;qdata[(q-&gt;tail-1+q-&gt;qlen)%q-&gt;qlen];</span><br><span class="line">    if(!queue_is_empty(q))</span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;tail = (q-&gt;tail-1+q-&gt;qlen)%q-&gt;qlen;</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int queue_peek_tail(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">    if(!queue_is_empty(q))</span><br><span class="line">    &#123;</span><br><span class="line">        return q-&gt;qdata[(q-&gt;tail-1+q-&gt;qlen)%q-&gt;qlen];</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line">void queue_print(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">    printf(&quot;in queue: &quot;);</span><br><span class="line">for(i = q-&gt;head; i != q-&gt;tail; i= (i+1)%q-&gt;qlen)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,q-&gt;qdata[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void queue_reflact(Queue *q, int *nums)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    printf(&quot;in queue: &quot;);</span><br><span class="line">for(i = q-&gt;head; i != q-&gt;tail; i= (i+1)%q-&gt;qlen)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d &quot;,nums[q-&gt;qdata[i]]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void pr(int* nums, int numsSize)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    printf(&quot;result: &quot;);</span><br><span class="line">    for(i=0; i&lt;numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d &quot;,nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize)&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int j=0;</span><br><span class="line">    </span><br><span class="line">    int rsize = numsSize -k +1; </span><br><span class="line">    if(numsSize==0)</span><br><span class="line">    &#123;</span><br><span class="line">        *returnSize = 0;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue qnode;</span><br><span class="line">    Queue* q = &amp;qnode;</span><br><span class="line">    queue_init(q, k);</span><br><span class="line">    </span><br><span class="line">    *returnSize = rsize;</span><br><span class="line">    int *r = (int *)malloc(sizeof(int)*rsize);</span><br><span class="line">    *returnSize = rsize;</span><br><span class="line">    memset(r, 0, sizeof(int)*rsize);</span><br><span class="line">     </span><br><span class="line">    for(i=0; i&lt;numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(queue_is_empty(q))</span><br><span class="line">        &#123; </span><br><span class="line">            queue_add_tail(q, i);</span><br><span class="line">            goto juge;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        if(queue_peek_head(q)&lt;=i-k)</span><br><span class="line">        &#123;</span><br><span class="line">            queue_pull_head(q);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(!queue_is_empty(q) &amp;&amp; nums[queue_peek_tail(q)] &lt; nums[i])</span><br><span class="line">        &#123;</span><br><span class="line">             queue_pull_tail(q);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        queue_add_tail(q, i);</span><br><span class="line"> </span><br><span class="line">        juge:if(i-k+1&gt;=0)&#123;</span><br><span class="line">            r[j++] = nums[queue_peek_head(q)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :76 ms, 在所有 c 提交中击败了84.56% 的用户<br>内存消耗 :16.1 MB, 在所有 c 提交中击败了9.09%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;滑动窗口最大值&quot;&gt;&lt;a href=&quot;#滑动窗口最大值&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口最大值&quot;&gt;&lt;/a&gt;滑动窗口最大值&lt;/h3&gt;&lt;p&gt;给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在
      
    
    </summary>
    
    
      <category term="Leetcode队列" scheme="http://yoursite.com/categories/Leetcode%E9%98%9F%E5%88%97/"/>
    
      <category term="困难" scheme="http://yoursite.com/categories/Leetcode%E9%98%9F%E5%88%97/%E5%9B%B0%E9%9A%BE/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="困难" scheme="http://yoursite.com/tags/%E5%9B%B0%E9%9A%BE/"/>
    
      <category term="队列" scheme="http://yoursite.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>每日温度</title>
    <link href="http://yoursite.com/2019/11/02/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/"/>
    <id>http://yoursite.com/2019/11/02/每日温度/</id>
    <published>2019-11-02T14:02:32.144Z</published>
    <updated>2019-11-02T14:16:51.224Z</updated>
    
    <content type="html"><![CDATA[<h3 id="每日温度"><a href="#每日温度" class="headerlink" title="每日温度"></a>每日温度</h3><p>根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用?0 来代替。</p><p>例如，给定一个列表?<code>temperatures = [73, 74, 75, 71, 69, 72, 76, 73]</code>，你的输出应该是?<code>[1, 1, 4, 2, 1, 1, 0, 0]</code>。</p><p>提示：气温 列表长度的范围是?<code>[1, 30000]</code>。每个气温的值的均为华氏度，都是在?<code>[30, 100]?</code>范围内的整数。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/daily-temperatures" target="_blank" rel="noopener">https://leetcode-cn.com/problems/daily-temperatures</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>创建一个栈，把第一天的温度放进栈内，第二天与之比较，如果比第一天温度高，则应该输出1，如果比第一天温度低，就把这个温度值也入栈，继续下一个数值进行比较，如果温度比第二天高，则对应的第二天输出的应该为1，第二天的温度值出栈，然后与第一天的进行比较，如果大则第一天的数值出栈，对应输出为2，否则继续下一个元素按照这种方法比较，直到最后一个比较完，栈内还有元素就依次出栈，每个元素对应的输出结果为0.<br><strong>实现过程</strong></p><ul><li>定义一个栈，并定义栈顶指针top</li><li>创建一个链表<code>res</code> 用来存储结果，定义一个 <code>temp</code>用来存储数组下标</li><li>核心代码如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">for(i = 0; i&lt; TSize; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    while(top != -1 &amp;&amp; T[i]&gt;T[stack[top]])</span><br><span class="line">    &#123;</span><br><span class="line">        temp = stack[top];</span><br><span class="line">        top--;//处理下标的距离</span><br><span class="line">        res[temp] = i - temp;</span><br><span class="line">    &#125;</span><br><span class="line">    ++top;//栈空了或者满足递减条件就入站</span><br><span class="line">    stack[top] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="完整代码如下"><a href="#完整代码如下" class="headerlink" title="完整代码如下"></a>完整代码如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Note: The returned array must be malloced, assume caller calls free().</span><br><span class="line"> */</span><br><span class="line">#define MAX 30000</span><br><span class="line"></span><br><span class="line">int* dailyTemperatures(int* T, int TSize, int* returnSize)&#123;</span><br><span class="line">    int stack[MAX] = &#123;0&#125;;</span><br><span class="line">    int top = -1,i = 0, temp = 0;</span><br><span class="line">    int* res =(int *)malloc(sizeof(int)*TSize);</span><br><span class="line">    memset(res,0,sizeof(int)*TSize);//初始化函数 给res中 sizeof(int)*Tsize个赋值为0</span><br><span class="line">    if(res == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        * returnSize = 0;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i = 0; i&lt; TSize; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        while(top != -1 &amp;&amp; T[i]&gt;T[stack[top]])</span><br><span class="line">        &#123;</span><br><span class="line">            temp = stack[top];</span><br><span class="line">            top--;//处理下标的距离</span><br><span class="line">            res[temp] = i - temp;</span><br><span class="line">        &#125;</span><br><span class="line">        ++top;//栈空了或者满足递减条件就入站</span><br><span class="line">        stack[top] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    * returnSize = TSize;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :232 ms, 在所有?c?提交中击败了53.11%的用户<br>内存消耗 :23.8 MB, 在所有?c?提交中击败了76.47%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;每日温度&quot;&gt;&lt;a href=&quot;#每日温度&quot; class=&quot;headerlink&quot; title=&quot;每日温度&quot;&gt;&lt;/a&gt;每日温度&lt;/h3&gt;&lt;p&gt;根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请
      
    
    </summary>
    
    
      <category term="Leetcode数组" scheme="http://yoursite.com/categories/Leetcode%E6%95%B0%E7%BB%84/"/>
    
      <category term="中等" scheme="http://yoursite.com/categories/Leetcode%E6%95%B0%E7%BB%84/%E4%B8%AD%E7%AD%89/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="中等" scheme="http://yoursite.com/tags/%E4%B8%AD%E7%AD%89/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>有效的括号</title>
    <link href="http://yoursite.com/2019/11/01/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>http://yoursite.com/2019/11/01/有效的括号/</id>
    <published>2019-11-01T14:06:37.920Z</published>
    <updated>2019-11-01T14:17:40.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p>示例 5:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li>获取要判断的字符串长度，如果字符串为空，返回true 否则返回false</li><li>创建一个栈 在字符串中找到 ‘(’ 或者 ‘{‘ 或者 ‘[‘的时候进栈，找到与之匹配的‘)’ 或者 ‘}’ 或者 ‘]’时候出栈 </li><li>如何查找是否匹配 写了一个函数 isTrue 用来判断是否匹配<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool isTrue(char a,char b)</span><br><span class="line">&#123;</span><br><span class="line">    if((a == &apos;(&apos; &amp;&amp; b == &apos;)&apos;) || (a == &apos;&#123;&apos; &amp;&amp; b == &apos;&#125;&apos;) ||(a == &apos;[&apos; &amp;&amp; b == &apos;]&apos;))</span><br><span class="line">        return true;</span><br><span class="line">    else </span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>遍历整个字符串，进行对应的出栈和进栈</li><li>如果遍历结束，栈为空则表示完全匹配，否则表示不匹配</li></ul><h4 id="对于这个题的完整代码如下"><a href="#对于这个题的完整代码如下" class="headerlink" title="对于这个题的完整代码如下"></a>对于这个题的完整代码如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">bool isTrue(char a,char b)</span><br><span class="line">&#123;</span><br><span class="line">    if((a == &apos;(&apos; &amp;&amp; b == &apos;)&apos;) || (a == &apos;&#123;&apos; &amp;&amp; b == &apos;&#125;&apos;) ||(a == &apos;[&apos; &amp;&amp; b == &apos;]&apos;))</span><br><span class="line">        return true;</span><br><span class="line">    else </span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool isValid(char * s)&#123;</span><br><span class="line">    int top = -1;</span><br><span class="line">    int len=strlen(s);</span><br><span class="line">    if(len == 0)</span><br><span class="line">        return true;</span><br><span class="line">    char str[len];</span><br><span class="line">    int i=0;</span><br><span class="line">    for(i=0; i&lt;len ;++i)</span><br><span class="line">    &#123;</span><br><span class="line">         if(top==-1 || !(isTrue(str[top],s[i])))</span><br><span class="line">        &#123;</span><br><span class="line">            ++top;</span><br><span class="line">            str[top] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        else if(isTrue(str[top],s[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            --top;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(top == -1)</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时 :4 ms, 在所有 c 提交中击败了69.12%的用户<br>内存消耗 :6.9 MB, 在所有 c 提交中击败了73.49%的用户</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;有效的括号&quot;&gt;&lt;a href=&quot;#有效的括号&quot; class=&quot;headerlink&quot; title=&quot;有效的括号&quot;&gt;&lt;/a&gt;有效的括号&lt;/h2&gt;&lt;p&gt;给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。&lt;/p&gt;
&lt;p&gt;有效字
      
    
    </summary>
    
    
      <category term="Leetcode简单" scheme="http://yoursite.com/categories/Leetcode%E7%AE%80%E5%8D%95/"/>
    
      <category term="简单" scheme="http://yoursite.com/categories/Leetcode%E7%AE%80%E5%8D%95/%E7%AE%80%E5%8D%95/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="简单" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>有效的字母异位词</title>
    <link href="http://yoursite.com/2019/11/01/%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <id>http://yoursite.com/2019/11/01/有效的字母异位词/</id>
    <published>2019-11-01T03:03:35.074Z</published>
    <updated>2019-11-01T02:55:34.141Z</updated>
    
    <content type="html"><![CDATA[<h3 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h3><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>示例?1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p>说明:<br>你可以假设字符串只包含小写字母。</p><p>进阶:<br>如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-anagram" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-anagram</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>解决字符串的问题，英文字母一共才26个，我们可以创建两个数组a[],b[]，数组中的元素分别对应字母”a,b,c….z“，遍历数组 s 数组s中每个字符对应的数组元素a[i]++，同理遍历数组 t 数组t中每个字符对应的数组元素b[i]++,然后比较数组a[]与数组b[],如果数组一致则<code>return true</code> 否则<code>return false</code></p><p>提交的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">bool isAnagram(char * s, char * t)&#123;</span><br><span class="line">    int a[26]=&#123;0&#125;;</span><br><span class="line">    int b[26]=&#123;0&#125;;</span><br><span class="line">    int n;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;strlen(s);++i)&#123;</span><br><span class="line">        if(s[i]&gt;=97 &amp;&amp; s[i]&lt;=123)</span><br><span class="line">        &#123;</span><br><span class="line">            n=s[i]-97;</span><br><span class="line">            a[n]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0 ;i&lt;strlen(t); ++i)&#123;</span><br><span class="line">        if(t[i]&gt;=97 &amp;&amp; t[i]&lt;=123)</span><br><span class="line">         &#123;</span><br><span class="line">            n=t[i]-97;</span><br><span class="line">            b[n]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;26;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(a[i]!=b[i])</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时：344 ms<br>仅仅至战胜了5.12%的c提交记录</p></blockquote><p><strong>加油！每天做点数据结构练习!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;有效的字母异位词&quot;&gt;&lt;a href=&quot;#有效的字母异位词&quot; class=&quot;headerlink&quot; title=&quot;有效的字母异位词&quot;&gt;&lt;/a&gt;有效的字母异位词&lt;/h3&gt;&lt;p&gt;给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Leetcode字符串" scheme="http://yoursite.com/categories/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="简单" scheme="http://yoursite.com/categories/Leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2/%E7%AE%80%E5%8D%95/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="简单" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8D%95/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建个人博客 使用Hexo（一）</title>
    <link href="http://yoursite.com/2019/11/01/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20%E4%BD%BF%E7%94%A8Hexo%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/11/01/如何搭建个人博客 使用Hexo（一）/</id>
    <published>2019-11-01T03:03:35.071Z</published>
    <updated>2019-10-30T14:26:07.915Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享一篇文章，教大家如何一步步使用 GitHub 搭建出自己专属的个人博客！弄个博客网站不是要有服务器，数据库，域名的嘛？没事，如果都没有，我们依然可以搭建一个博客。这里我拿Win10系统做演示，对于Mac和Linux系统 基本是一样的</p><h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><p>首先大家需要一个GitHub的账户，GitHub Pages 允许每个账户创建一个名为 {username}.github.io 的仓库，另外它还会自动为这个仓库分配一个 github.io 的二级域名，这就解决了域名的问题，当然如果想要自定义域名的话，也可以支持，我后续会跟大家说的。</p><p>所以大家先注册个GitHub账号，我们就正式开始吧！</p><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><ul><li><p>去<a href="https://nodejs.org" target="_blank" rel="noopener">官网</a>安装Node.js </p></li><li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glapfwbwj30oc0eugma.jpg" alt="很棒哈"></p></li><li><p>下载好后一路 <strong>next</strong> 就好</p></li></ul><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ul><li>新建一个文件夹，比如我这里建了  blog  文件  </li><li>我们来看一下 Node.js是否安装成功</li><li><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glapmae5j30bq057t8l.jpg" alt="很棒哈"></li></ul><ul><li><p>由于国内镜像源速度不是很好，我们先来安装个cnpm提高速度，以后下载什么东西都用cnpm</p></li><li><p>执行如下命令 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>等待安装完成</p></li><li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glappw47j30mm073jre.jpg" alt="很棒哈"></p></li><li><p>安装完成看一下他的版本</p></li><li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glapve37j30n00act8y.jpg" alt="很棒哈"></p></li><li><p><strong>安装Hexo</strong> 执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaq20hwj30nf0k90tv.jpg" alt="很棒哈"></p></li><li><p>使用如下命令检测是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li><li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaq8xrzj308l082wed.jpg" alt="很棒哈"></p></li><li><p>安装完毕之后，确保环境变量配置好，能正常使用 hexo 命令。</p></li><li><p>查看当前路径命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure></li><li><p>结果为 我的是存放在D盘blog的文件夹内<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaqe6xej306v03egld.jpg" alt="很棒哈"></p></li><li><p>然后我们运行命令，这步是关键，主要是建立整个项目，这里我的文件夹名字是blog</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li><p>等待下载安装完成，结果如下<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaqlqa8j30n90d2t99.jpg" alt="很棒哈"><br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaqrkauj30oi07jmxf.jpg" alt="很棒哈"></p></li></ul><h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><ul><li><p>首先我们调用  Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaqvv6oj30eq0dtmx8.jpg" alt="很棒哈"><br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glar00z8j30nj06v0su.jpg" alt="很棒哈"></p></li><li><p>然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li><p>运行结果如下<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glar4s35j30ei01h3ya.jpg" alt="很棒哈"></p></li><li><p>我们在本地 4000 端口上就可以查看博客站点了，如图所示：<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glarlqx0j31b00s0gyo.jpg" alt="很棒哈"></p></li><li><p>到这为止我们就已经搭建好 一个博客框架了</p></li><li><p>记住这三条很常用的命令</p><blockquote><p>hexo clean #用来清理缓存文件<br>hexo g      #生成文件<br>hexo  s     #运行本地服务器<br>hexo  d   #上传到服务器</p></blockquote></li></ul><h4 id="这次我们就先说到这"><a href="#这次我们就先说到这" class="headerlink" title="这次我们就先说到这"></a>这次我们就先说到这</h4><ul><li>下一次我再跟大家分享 如何美化我们的博客。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天跟大家分享一篇文章，教大家如何一步步使用 GitHub 搭建出自己专属的个人博客！弄个博客网站不是要有服务器，数据库，域名的嘛？没事，如果都没有，我们依然可以搭建一个博客。这里我拿Win10系统做演示，对于Mac和Linux系统 基本是一样的&lt;/p&gt;
&lt;h4 id=&quot;准
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>K个一组翻转链表</title>
    <link href="http://yoursite.com/2019/11/01/K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/11/01/K个一组翻转链表/</id>
    <published>2019-11-01T03:03:35.070Z</published>
    <updated>2019-11-01T14:16:42.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K个一组翻转链表"><a href="#K个一组翻转链表" class="headerlink" title="K个一组翻转链表"></a>K个一组翻转链表</h2><p>给你一个链表，每?k?个节点一组进行翻转，请你返回翻转后的链表。</p><p>k?是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是?k?的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>示例 :</p><p>给定这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5</p><p>当?k?= 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5</p><p>当?k?= 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p><p>说明 :</p><p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-nodes-in-k-group</a></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们可以创建三个指针<code>pre</code>  <code>cur</code>   <code>next</code><br><code>pre</code>  指针指向开始节点，<code>cue</code>指针指向<code>pre</code> 的下一个节点，<code>next</code>指针指向<code>cur</code>指针的下一个节点。<br>每次移动让<code>next = cur-&gt;next</code>节点 <code>cur-&gt;next = pre</code>让cur的指针指向pre ，pre移动到cur的位置，cur移动到next的位置，这样就实现了 链表的反转<br>代码实现如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode* Myreverse(struct ListNode *head)&#123;</span><br><span class="line">    struct ListNode* next = NULL;</span><br><span class="line">    struct ListNode *pre = NULL;</span><br><span class="line">    struct ListNode *cur = head;</span><br><span class="line">    while(cur != NULL)&#123;</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    return pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对于这个题的完整代码如下"><a href="#对于这个题的完整代码如下" class="headerlink" title="对于这个题的完整代码如下"></a>对于这个题的完整代码如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode* Myreverse(struct ListNode *head);</span><br><span class="line">struct ListNode* reverseKGroup(struct ListNode* head, int k)&#123;</span><br><span class="line">    struct ListNode *cur = head, *start = head, *next = NULL, *result = head;</span><br><span class="line">    struct ListNode *pre = (struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">    int flag = 0;//是否第一次翻转</span><br><span class="line">    pre-&gt;next = head;</span><br><span class="line">    while(cur != NULL)&#123;</span><br><span class="line">        for(int i = 1;(i&lt;k)&amp;&amp;(cur != NULL); i++)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        flag++;</span><br><span class="line">        if(cur == NULL) break;</span><br><span class="line">        next = cur-&gt;next;//后继</span><br><span class="line">        cur-&gt;next = NULL;//切断链表进行翻转</span><br><span class="line">        pre-&gt;next = Myreverse(start);</span><br><span class="line">        if (flag == 1) result = pre-&gt;next;</span><br><span class="line">        pre = start;</span><br><span class="line">        start-&gt;next = next;</span><br><span class="line">        cur = next;</span><br><span class="line">        start = next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct ListNode* Myreverse(struct ListNode *head)&#123;</span><br><span class="line">    struct ListNode* next = NULL;</span><br><span class="line">    struct ListNode *pre = NULL;</span><br><span class="line">    struct ListNode *cur = head;</span><br><span class="line">    while(cur != NULL)&#123;</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    return pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行用时：12 ms</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;K个一组翻转链表&quot;&gt;&lt;a href=&quot;#K个一组翻转链表&quot; class=&quot;headerlink&quot; title=&quot;K个一组翻转链表&quot;&gt;&lt;/a&gt;K个一组翻转链表&lt;/h2&gt;&lt;p&gt;给你一个链表，每?k?个节点一组进行翻转，请你返回翻转后的链表。&lt;/p&gt;
&lt;p&gt;k?是一个正
      
    
    </summary>
    
    
      <category term="Leetcode链表" scheme="http://yoursite.com/categories/Leetcode%E9%93%BE%E8%A1%A8/"/>
    
      <category term="困难" scheme="http://yoursite.com/categories/Leetcode%E9%93%BE%E8%A1%A8/%E5%9B%B0%E9%9A%BE/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="困难" scheme="http://yoursite.com/tags/%E5%9B%B0%E9%9A%BE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/01/hello-world/"/>
    <id>http://yoursite.com/2019/11/01/hello-world/</id>
    <published>2019-11-01T03:03:35.068Z</published>
    <updated>2019-10-27T13:06:52.607Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://yoursite.com/2019/10/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/10/27/我的第一篇博客文章/</id>
    <published>2019-10-27T13:13:44.000Z</published>
    <updated>2019-10-27T13:24:28.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h2 id="内容"><a href="#内容" class="headerlink" title=" 内容"></a> 内容</h2><h2 id="是否支持markdown"><a href="#是否支持markdown" class="headerlink" title="是否支持markdown"></a>是否支持markdown</h2><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;h2 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot; 内容&quot;&gt;&lt;/a&gt; 内容&lt;/h2&gt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
