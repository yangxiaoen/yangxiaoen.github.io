<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>合并两个有序链表</title>
    <url>/2019/11/23/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h3><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>创建两个节点指针<code>head</code>,<code>l3</code>，且<code>head</code>指向<code>l3</code><br>比较<code>l1</code>和<code>l2</code>的值，小的插入<code>l3</code>里面，各自往后移动不断进行比较<br>直到其中一个链表为空了，另一个有序链表直接链接到<code>l3</code><br>返回<code>head-&gt;next</code></p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><pre><code>
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){
    if(l1 == NULL)
        return l2;
    if(l2 == NULL)
        return l1;
    struct ListNode *l3,*head;
    head = (struct ListNode*) malloc (sizeof(struct ListNode));
    l3 = head;
    while(l1 &amp;&amp; l2)
    {
        if(l1-&gt;val &lt; l2-&gt;val)
        {
            l3-&gt;next = l1;
            l1 = l1-&gt;next;
            l3 = l3-&gt;next;
        }else{
            l3-&gt;next = l2;
            l2 = l2-&gt;next;
            l3 = l3-&gt;next;
        }
    }
    if(l1 != NULL)
        l3-&gt;next = l1;
    else    
        l3-&gt;next = l2;
    return head-&gt;next;
}</code></pre><blockquote>
<p>执行用时 :8 ms, 在所有 c 提交中击败了60.79%的用户<br>内存消耗 :7.5 MB, 在所有 c 提交中击败了77.63%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode链表</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>Leetcode</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title>不同的二叉搜索树</title>
    <url>/2019/11/22/%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<h3 id="不同的二叉搜索树"><a href="#不同的二叉搜索树" class="headerlink" title="不同的二叉搜索树"></a>不同的二叉搜索树</h3><p>给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 3</span><br><span class="line">输出: 5</span><br><span class="line">解释:</span><br><span class="line">给定 n = 3, 一共有 5 种不同结构的二叉搜索树:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    /     /       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/unique-binary-search-trees" target="_blank" rel="noopener">https://leetcode-cn.com/problems/unique-binary-search-trees</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>二叉搜索树：<br>①若任意节点的左子树不为空，则左子树上所有结点的值均小于它根节点的值<br>②若任意节点的右子树不为空，则右子树上所有结点的值均大于它根节点的值<br>③任意结点的左、右子树也是二叉搜索树在本题中： </p>
<p>设dp(n)表示有n个结点时搜索二叉树有多少种可能，则</p>
<ol>
<li>当头结点的值为1时，左子树为空，右子树上有n - 1个结点，右子树的搜索二叉树个数为dp(n - 1)</li>
<li>当头结点的值为i(1 &lt; i &lt; n)时，左子树由结点1—&gt;i-1构成，右子树由结点i+1—&gt;n构成；左子树的搜索二叉树个数为dp(i-1),右子树的搜索二叉树个数为dp(n - i);此时搜索二叉树总的个数为dp(i - 1) * dp(n - i)</li>
<li>当头结点的值为n时，右子树为空，左子树上有n - 1个结点，左子树的搜索二叉树个数为dp(n - 1)所以，n个结点时搜索二叉树的个数上述三个步骤的和。</li>
</ol>
<p>递推公式：<br>dp(n)=dp(0)dp(n-1)+dp(1)dp(n-2)+dp(2)dp(n-3)+…+dp(n-1)dp(0)</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int numTrees(int n)&#123;</span><br><span class="line">    int dp[n+1];</span><br><span class="line">    dp[0] = 1;</span><br><span class="line">    dp[1] = 1;</span><br><span class="line">    for(int i = 2; i &lt; n+1; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for(int j = 1; j &lt; i+1; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += dp[j-1] * dp[i-j];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :0 ms, 在所有 c 提交中击败了100.00%的用户<br>内存消耗 :6.7 MB, 在所有 c 提交中击败了28.95%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode二叉树</category>
        <category>二叉搜索树</category>
        <category>动态规划</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>中等</tag>
        <tag>动态规划</tag>
        <tag>二叉搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>爬楼梯</title>
    <url>/2019/11/21/%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    <content><![CDATA[<h3 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h3><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶</span><br><span class="line">2.  2 阶</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/climbing-stairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/climbing-stairs</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>通过查找规律，很容易发现这个的结果就是，斐波那契数。所以使用解决斐波那契数的方法解决</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int climbStairs(int n)&#123;</span><br><span class="line">    int a = 0, b = 1, c = 0;</span><br><span class="line">    while (n--)&#123;</span><br><span class="line">        c = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了63.56%的用户<br>内存消耗 :6.8 MB, 在所有 c 提交中击败了52.18%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode递归</category>
        <category>斐波那契数</category>
        <category>递归</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>递归</tag>
        <tag>简单</tag>
        <tag>斐波那契数</tag>
      </tags>
  </entry>
  <entry>
    <title>删除链表的倒数第N个结点</title>
    <url>/2019/11/21/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
    <content><![CDATA[<h3 id="删除链表的倒数第N个结点"><a href="#删除链表的倒数第N个结点" class="headerlink" title="删除链表的倒数第N个结点"></a>删除链表的倒数第N个结点</h3><p>给定一个链表，删除链表的倒数第<code>n</code> 个节点，并且返回链表的头结点。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.</span><br><span class="line"></span><br><span class="line">当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>给定的 n 保证是有效的。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们可以假设设置了双指针<code>fast</code> 和 <code>slow</code> ，当 <code>fast</code>指向末尾的 <code>NULL</code>，<code>fast</code>和 <code>slow</code> 之间相隔的元素个数为<code>n</code>时，那么删除掉<code>slow</code>的下一个指针就完成了要求</p>
<ul>
<li>设置虚拟结点 <code>node</code> 指向 <code>head</code></li>
<li>设定双指针 <code>fast</code> 和 <code>slow</code>，<code>fast</code>指向 <code>head</code>，<code>slow</code>指向<code>head</code>。</li>
<li>移动 <code>fast</code>直到<code>fast</code> 与 <code>slow</code>之间相隔的元素个数为<code>n</code></li>
<li>同时移动 <code>fast</code>和<code>slow</code>直到 <code>fast</code> 指向的为<code>NULL</code></li>
<li>将 <code>slow</code>的下个节点指向下下个节点</li>
</ul>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct ListNode *next;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">struct ListNode* removeNthFromEnd(struct ListNode* head, int n)&#123;</span><br><span class="line">    if(head == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">    struct ListNode node;</span><br><span class="line">    node.next = head;</span><br><span class="line">    struct ListNode * fast = head;</span><br><span class="line">    struct ListNode * slow = &amp;node;</span><br><span class="line">    int i = 1;</span><br><span class="line">    while(fast != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        if(i &gt; n)//fast 与 slow 的间隔 为n的时候，两个指针一起移动</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow -&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast-&gt; next;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    slow -&gt; next = slow-&gt;next-&gt;next;</span><br><span class="line">    return node.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :8 ms, 在所有 c 提交中击败了37.41%的用户<br>内存消耗 :6.9 MB, 在所有 c 提交中击败了91.62%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode链表</category>
        <category>双指针</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>Leetcode</tag>
        <tag>中等</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>加一</title>
    <url>/2019/11/19/%E5%8A%A0%E4%B8%80/</url>
    <content><![CDATA[<h3 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h3><p>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。</p>
<p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p>
<p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,2,3]</span><br><span class="line">输出: [1,2,4]</span><br><span class="line">解释: 输入数组表示数字 123。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [4,3,2,1]</span><br><span class="line">输出: [4,3,2,2]</span><br><span class="line">解释: 输入数组表示数字 4321。</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/plus-one" target="_blank" rel="noopener">https://leetcode-cn.com/problems/plus-one</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>第一种情况：直接给数组最后一位的数字加一<br>第二种情况：1119 最后一位（最高位不为9）数字加一，会向前进一<br>第三种情况：999 每一位加都进一，且最高位为9，我们就需要动态开辟一个空间，空间大小为原数组大小加一</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int* plusOne(int* digits, int digitsSize, int* returnSize)&#123;</span><br><span class="line">    if(digitsSize == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return digits;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = digitsSize - 1; i&gt;= 0; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        digits[i] = (digits[i] + 1) % 10;</span><br><span class="line">        if(digits[i] != 0)</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    * returnSize = digitsSize;</span><br><span class="line">    if(digits[0] == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        int *result = (int *) malloc (sizeof(int) * (digitsSize+1));</span><br><span class="line">        result[0] = 1;</span><br><span class="line">        for(int k =1; k&lt;digitsSize+1; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            result[k] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        *returnSize = digitsSize + 1;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        return digits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了80.94%的用户<br>内存消耗 :7.2 MB, 在所有 c 提交中击败了5.51%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode数组</category>
        <category>动态分配</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>数组</tag>
        <tag>简单</tag>
        <tag>动态分配</tag>
      </tags>
  </entry>
  <entry>
    <title>罗马数字转整数</title>
    <url>/2019/11/18/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    <content><![CDATA[<h3 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title="罗马数字转整数"></a>罗马数字转整数</h3><p>罗马数字包含以下七种字符:<code>I， V， X， L，C，D 和 M</code>。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>数值</th>
</tr>
</thead>
<tbody><tr>
<td>I</td>
<td>1</td>
</tr>
<tr>
<td>V</td>
<td>5</td>
</tr>
<tr>
<td>X</td>
<td>10</td>
</tr>
<tr>
<td>L</td>
<td>50</td>
</tr>
<tr>
<td>C</td>
<td>100</td>
</tr>
<tr>
<td>D</td>
<td>500</td>
</tr>
<tr>
<td>M</td>
<td>1000</td>
</tr>
<tr>
<td>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</td>
<td></td>
</tr>
</tbody></table>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li>
<li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li>
<li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li>
</ul>
<p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure>
<p>示例 4:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure>
<p>示例 5:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/roman-to-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/roman-to-integer</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>用<code>switch()</code>解决，判断字符串中每个字符，与罗马字符对应，结果加上罗马字母对应的值， 比较字符串中<code>I、X 、C</code>字符 <code>s[i]</code>与<code>s[i+1]</code>是否符合</p>
<pre><code>1. I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
2. X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90
3.C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900</code></pre><p>这六种情况,如果符合，则结果减去 <code>2</code>倍的 <code>s[i]</code>罗马字母对应的值，因为本来要减去的值，之前多加了一个，所以要减去二倍的 罗马值。</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int change(char c)</span><br><span class="line">&#123;</span><br><span class="line">    switch (c)</span><br><span class="line">    &#123;</span><br><span class="line">        case &apos;I&apos;: return 1;</span><br><span class="line">        case &apos;V&apos;: return 5;</span><br><span class="line">        case &apos;X&apos;: return 10;</span><br><span class="line">        case &apos;L&apos;: return 50;</span><br><span class="line">        case &apos;C&apos;: return 100;</span><br><span class="line">        case &apos;D&apos;: return 500;</span><br><span class="line">        case &apos;M&apos;: return 1000;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int romanToInt(char * s)</span><br><span class="line">&#123;</span><br><span class="line">    int i = 0;</span><br><span class="line">    int result = 0;</span><br><span class="line">    while (s[i] != &apos;\0&apos;) &#123;</span><br><span class="line">        if (s[i] == &apos;I&apos; &amp;&amp; s[i + 1] == &apos;V&apos;) &#123;</span><br><span class="line">            result += 4;</span><br><span class="line">            i += 2;</span><br><span class="line">        &#125; else if (s[i] == &apos;I&apos; &amp;&amp; s[i + 1] == &apos;X&apos;) &#123;</span><br><span class="line">            result += 9;</span><br><span class="line">            i += 2;</span><br><span class="line">        &#125; else if (s[i] == &apos;X&apos; &amp;&amp; s[i + 1] == &apos;L&apos;) &#123;</span><br><span class="line">            result += 40;</span><br><span class="line">            i += 2;</span><br><span class="line">        &#125; else if (s[i] == &apos;X&apos; &amp;&amp; s[i + 1] == &apos;C&apos;) &#123;</span><br><span class="line">            result += 90;</span><br><span class="line">            i += 2;</span><br><span class="line">        &#125; else if (s[i] == &apos;C&apos; &amp;&amp; s[i + 1] == &apos;D&apos;) &#123;</span><br><span class="line">            result += 400;</span><br><span class="line">            i += 2;</span><br><span class="line">        &#125; else if (s[i] == &apos;C&apos; &amp;&amp; s[i + 1] == &apos;M&apos;) &#123;</span><br><span class="line">            result += 900;</span><br><span class="line">            i += 2;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result += change(s[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :20 ms, 在所有 c 提交中击败了14.17%的用户<br>内存消耗 :7.2 MB, 在所有 c 提交中击败了79.18%的用户</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int romanToInt(char * s)&#123;</span><br><span class="line">    int len = strlen(s);</span><br><span class="line">    if (len == 0)</span><br><span class="line">        return 0;</span><br><span class="line">    int ans = 0;</span><br><span class="line">    </span><br><span class="line">    for(int i=0; i &lt; len; ++i) &#123;</span><br><span class="line">        switch (s[i]) &#123;</span><br><span class="line">            case &apos;M&apos;: ans+=1000;break;</span><br><span class="line">            case &apos;D&apos;: ans+=500;break;  </span><br><span class="line">            case &apos;C&apos;: ans+=100; </span><br><span class="line">                if(i &lt; (len - 1)) </span><br><span class="line">                    if(s[i+1] == &apos;M&apos; || s[i+1] == &apos;D&apos;) </span><br><span class="line">                        ans-=200; </span><br><span class="line">                break;</span><br><span class="line">            case &apos;L&apos;: ans+=50; break;</span><br><span class="line">            case &apos;X&apos;: ans+=10; </span><br><span class="line">                if(i &lt; (len - 1)) </span><br><span class="line">                    if(s[i+1] == &apos;L&apos; || s[i+1] == &apos;C&apos;) </span><br><span class="line">                    ans-=20; </span><br><span class="line">                break;</span><br><span class="line">            case &apos;V&apos;: ans+=5;  break;</span><br><span class="line">            case &apos;I&apos;: ans+=1;  </span><br><span class="line">                if(i &lt; (len - 1)) </span><br><span class="line">                    if(s[i+1] == &apos;X&apos; || s[i+1] == &apos;V&apos;) </span><br><span class="line">                        ans-=2; </span><br><span class="line">                break;</span><br><span class="line">            default: break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :12 ms, 在所有 c 提交中击败了58.66%的用户<br>内存消耗 :7.2 MB, 在所有 c 提交中击败了79.05%的用户</p>
</blockquote>
<p>以上两种代码实现方式，第二种比第一种，用时短减少了很多<code>if..else</code>判断。</p>
]]></content>
      <categories>
        <category>Leetcode字符串</category>
        <category>回文数</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>简单</tag>
        <tag>字符串</tag>
        <tag>字符转换</tag>
      </tags>
  </entry>
  <entry>
    <title>回文数</title>
    <url>/2019/11/16/%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    <content><![CDATA[<pre><code>回文数</code></pre><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/palindrome-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-number</a></p>
<h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>如果给的数字是负数，则一定不是回文数</p>
<ol>
<li>将整数倒置，判断与原整数是否相同。</li>
<li>将整数转化为字符串<code>a[]</code>，<code>a[i]</code>是字符串第一个元素，<code>a[j]</code>是字符串最后一个元素，判断<code>a[i]</code>与<code>a[j]</code>是否相等，如果相等 <code>i++,j++</code> 直到<code>a[i] == a[j]</code>,则返回<code>true</code>,如果不想等直接返回<code>false</code>。</li>
</ol>
<h4 id="完整代码（1）"><a href="#完整代码（1）" class="headerlink" title="完整代码（1）"></a>完整代码（1）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">bool isPalindrome(int x)&#123;</span><br><span class="line">    if(x &lt; 0)</span><br><span class="line">        return false;</span><br><span class="line">    long f = 0;</span><br><span class="line">    int temp = x;</span><br><span class="line">    for(;x;f = f * 10 +x % 10,x/=10);</span><br><span class="line">    if( temp == f &amp;&amp; temp &gt;= 0)</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :8 ms, 在所有 c 提交中击败了92.91%的用户<br>内存消耗 :7 MB, 在所有 c 提交中击败了93.11%的用户</p>
</blockquote>
<h4 id="完整代码（2）"><a href="#完整代码（2）" class="headerlink" title="完整代码（2）"></a>完整代码（2）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// itoa 是实现将整数转换为字符串的方法</span><br><span class="line">char* itoa(int num,char* str,int radix)</span><br><span class="line">&#123;</span><br><span class="line">	char index[]=&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;//索引表</span><br><span class="line">	unsigned unum;//存放要转换的整数的绝对值,转换的整数可能是负数</span><br><span class="line">	int i=0,j,k;//i用来指示设置字符串相应位，转换之后i其实就是字符串的长度；转换后顺序是逆序的，有正负的情况，k用来指示调整顺序的开始位置;j用来指示调整顺序时的交换。</span><br><span class="line"> </span><br><span class="line">	//获取要转换的整数的绝对值</span><br><span class="line">	if(radix==10&amp;&amp;num&lt;0)//要转换成十进制数并且是负数</span><br><span class="line">	&#123;</span><br><span class="line">		unum=(unsigned)-num;//将num的绝对值赋给unum</span><br><span class="line">		str[i++]=&apos;-&apos;;//在字符串最前面设置为&apos;-&apos;号，并且索引加1</span><br><span class="line">	&#125;</span><br><span class="line">	else unum=(unsigned)num;//若是num为正，直接赋值给unum</span><br><span class="line"> </span><br><span class="line">	//转换部分，注意转换后是逆序的</span><br><span class="line">	do</span><br><span class="line">	&#123;</span><br><span class="line">		str[i++]=index[unum%(unsigned)radix];//取unum的最后一位，并设置为str对应位，指示索引加1</span><br><span class="line">		unum/=radix;//unum去掉最后一位</span><br><span class="line"> </span><br><span class="line">	&#125;while(unum);//直至unum为0退出循环</span><br><span class="line"> </span><br><span class="line">	str[i]=&apos;\0&apos;;//在字符串最后添加&apos;\0&apos;字符，c语言字符串以&apos;\0&apos;结束。</span><br><span class="line"> </span><br><span class="line">	//将顺序调整过来</span><br><span class="line">	if(str[0]==&apos;-&apos;) k=1;//如果是负数，符号不用调整，从符号后面开始调整</span><br><span class="line">	else k=0;//不是负数，全部都要调整</span><br><span class="line"> </span><br><span class="line">	char temp;//临时变量，交换两个值时用到</span><br><span class="line">	for(j=k;j&lt;=(i-1)/2;j++)//头尾一一对称交换，i其实就是字符串的长度，索引最大值比长度少1</span><br><span class="line">	&#123;</span><br><span class="line">		temp=str[j];//头部赋值给临时变量</span><br><span class="line">		str[j]=str[i-1+k-j];//尾部赋值给头部</span><br><span class="line">		str[i-1+k-j]=temp;//将临时变量的值(其实就是之前的头部值)赋给尾部</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	return str;//返回转换后的字符串</span><br><span class="line">&#125;</span><br><span class="line">bool isPalindrome(int x)&#123;</span><br><span class="line">    if(x &lt; 0)</span><br><span class="line">        return false;</span><br><span class="line">    char string[100] = &#123;0&#125;;</span><br><span class="line">    itoa(x,string,10);</span><br><span class="line">    int i = 0, j = strlen(string);</span><br><span class="line">    for(i = 0; i != j &amp;&amp; j &gt;0 ; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(string[i] != string[j-1])</span><br><span class="line">            return false;</span><br><span class="line">        --j;</span><br><span class="line">    &#125; </span><br><span class="line">    return true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :16 ms, 在所有 c 提交中击败了58.54%的用户<br>内存消耗 :7.2 MB, 在所有 c 提交中击败了82.37%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode整数</category>
        <category>回文数</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>简单</tag>
        <tag>整数</tag>
      </tags>
  </entry>
  <entry>
    <title>最长回文子串</title>
    <url>/2019/11/15/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h3><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">char * longestPalindrome(char * s)&#123;</span><br><span class="line">    int len = strlen(s);</span><br><span class="line">    int maxSubStrLen = 0;</span><br><span class="line">    int startIdx, endIdx;</span><br><span class="line">    int searchIdx = 0, searchLen = 1;</span><br><span class="line">    int i, m, n;</span><br><span class="line">    if (len &lt;= 1) &#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">    while (searchIdx &lt; len) &#123;</span><br><span class="line">        for (i = searchIdx + 1; i &lt; len; i++)&#123;</span><br><span class="line">            if (s[searchIdx] != s[i]) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            searchLen++;</span><br><span class="line">        &#125;</span><br><span class="line">        m = i;</span><br><span class="line">        n = searchIdx - 1;</span><br><span class="line">        while ((n &gt;= 0) &amp;&amp; (m &lt; len)) &#123;</span><br><span class="line">            if (s[n] != s[m]) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            m++;</span><br><span class="line">            n--;</span><br><span class="line">            searchLen += 2;   </span><br><span class="line">        &#125;</span><br><span class="line">        if (searchLen &gt; maxSubStrLen)&#123;</span><br><span class="line">            maxSubStrLen = searchLen;</span><br><span class="line">            startIdx = n + 1;</span><br><span class="line">            endIdx = m - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        searchLen = 1;</span><br><span class="line">        searchIdx ++;</span><br><span class="line">    &#125;</span><br><span class="line">    s[endIdx + 1] = &apos;\0&apos;;</span><br><span class="line">    return &amp;s[startIdx];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :12 ms, 在所有 c 提交中击败了96.12%的用户<br>内存消耗 :7.2 MB, 在所有 c 提交中击败了80.99%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode字符串</category>
        <category>滑动窗口</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>中等</tag>
        <tag>字符串</tag>
        <tag>字符串的操作</tag>
      </tags>
  </entry>
  <entry>
    <title>盛最多水的容器</title>
    <url>/2019/11/14/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="盛最多水的容器"><a href="#盛最多水的容器" class="headerlink" title="盛最多水的容器"></a>盛最多水的容器</h3><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>
<p><img src="http://tva1.sinaimg.cn/large/0080ySGmly1g8xxf5axnej30m90anwep.jpg" alt="示意图"></p>
 <center> <font size=3>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</font></center>
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/container-with-most-water

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>用<code>k = heightSize - 1</code> ,比较<code>height[i]与height[k]</code>的大小，如果<code>height[i]</code>比<code>height[k]</code>大，用 <code>height[k] * (heightSize - 1 )，k--</code> 如果<code>height[i]</code>比<code>height[k]</code>小，用<code>height[i] * (heightSize - 1 )，i++</code> 逐一计算 每一个面积 ，最后获取最大的面积。</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int maxArea(int* height, int heightSize) &#123;</span><br><span class="line">    int area = 0;</span><br><span class="line">    int i = 0;</span><br><span class="line">    int k = heightSize -1;</span><br><span class="line">    while (1) &#123;</span><br><span class="line">        int temp_area;</span><br><span class="line">        if ( heightSize - 1 == 0)</span><br><span class="line">            break;</span><br><span class="line">        if (height[i] &gt; height[k]) &#123;</span><br><span class="line">            temp_area = height[k]*(heightSize - 1);</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            temp_area = height[i]*(heightSize - 1);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (temp_area &gt; area)</span><br><span class="line">            area = temp_area;</span><br><span class="line">        heightSize--;</span><br><span class="line">    &#125;</span><br><span class="line">    return area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :20 ms, 在所有 c 提交中击败了82.21%的用户<br>内存消耗 :7.9 MB, 在所有 c 提交中击败了48.80%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode数组</category>
        <category>循环</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>中等</tag>
        <tag>数组</tag>
        <tag>数组的操作</tag>
      </tags>
  </entry>
  <entry>
    <title>买卖股票的最佳时期</title>
    <url>/2019/11/13/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%9F/</url>
    <content><![CDATA[<h3 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h3><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意你不能在买入股票前卖出股票。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>遍历当前这个数字与后面每一个大于他的数字的差值，取得所有差值中最大的一个，这个实现起来不难。</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> int maxProfit(int* prices, int pricesSize)&#123;</span><br><span class="line">    if(pricesSize == 0 || pricesSize == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int max=0,min = prices[0];</span><br><span class="line">    </span><br><span class="line">    for(int i = 1; i&lt;pricesSize;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(prices[i] - min &gt; max)</span><br><span class="line">            max = prices[i] - min;</span><br><span class="line">        if(prices[i] &lt; min )</span><br><span class="line">            min = prices[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :12 ms, 在所有 c 提交中击败了60.05%的用户<br>内存消耗 :7.9 MB, 在所有 c 提交中击败了5.25%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode数组</category>
        <category>循环</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>数组</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title>整数反转</title>
    <url>/2019/11/12/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure>
<p> 示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-integer</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>获取整数各个位置上的数字，并且使用 <code>count</code>用来记录有几位数字，<code>result =result*10+ a[i] ;</code>得到结果，其余就是要判断溢出问题和 负数问题</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int reverse(int x)&#123;</span><br><span class="line">    int a[10] = &#123;0&#125;;</span><br><span class="line">    long result = 0;</span><br><span class="line">    int count = 0;</span><br><span class="line">    int temp = x;</span><br><span class="line">    int max = 0x7fffffff, min = 0x80000000;//int的最大值最小值</span><br><span class="line">    for(int i = 0; temp != 0; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = temp % 10;</span><br><span class="line">        temp = temp / 10;</span><br><span class="line">        count ++;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; i &lt; count; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        result =result*10+ a[i] ;</span><br><span class="line">       // result *= 10;</span><br><span class="line">    &#125;</span><br><span class="line">    if(result &gt;max || result &lt; min)</span><br><span class="line">        return 0;</span><br><span class="line">    else if(x &lt; 0)</span><br><span class="line">        return result * -1;</span><br><span class="line">    else </span><br><span class="line">        return result;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :0 ms, 在所有 c 提交中击败了100.00%的用户<br>内存消耗 :6.9 MB, 在所有 c 提交中击败了75.39%的用户</p>
</blockquote>
<p>在LeetCode平台中看到评论区有位 作者：止于至善<br>代码非常简洁明了，我在这也给贴出来，供大家学习交流！</p>
<h4 id="其他实现代码"><a href="#其他实现代码" class="headerlink" title="其他实现代码"></a>其他实现代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int reverse(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int max = 0x7fffffff, min = 0x80000000;//int的最大值最小值</span><br><span class="line">    long rs = 0;//用long类型判断溢出</span><br><span class="line">    for(;x;rs = rs*10+x%10,x/=10);//逆序，正负通吃，不用单独考虑负值</span><br><span class="line">    return rs&gt;max||rs&lt;min?0:rs;//超了最大值低于最小值就返回0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了80.32%的用户<br>内存消耗 :6.8 MB, 在所有 c 提交中击败了76.46%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode字符串</category>
        <category>循环</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>简单</tag>
        <tag>字符串</tag>
        <tag>字符串的操作</tag>
      </tags>
  </entry>
  <entry>
    <title>无重复字符的最长字串</title>
    <url>/2019/11/11/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a>无重复字符的最长子串</h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line"></span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>使用滑动窗口，如果字符串为空，或只有1个，则返回0或1，初始窗口<code>start、end</code>都指向第一个字符，len为1，<code>maxLen</code>为1。每次检查end之后的字符是否在<code>start-end</code>之间有重复。<br>如果有，则把<code>start</code>移到找到的位置之后（因为这个字符的存在性由新加入字符表达） 无论找到没有，<code>end</code>都向后移动，直至结束。 每次移动后，重新计算长度<code>len=end-start+1</code>； 如果<code>maxLen&lt; len</code>，则<code>maxLne = len</code></p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int lengthOfLongestSubstring(char * s)&#123;</span><br><span class="line">    int start = 0, end = 0, maxLen = 0,len = 0,i;</span><br><span class="line">    len = strlen(s);</span><br><span class="line">    if(len ==0 || len == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        return len;</span><br><span class="line">    &#125;</span><br><span class="line">    while(s[end+1] != 0) //每次取下一位，判断是否为空</span><br><span class="line">    &#123;</span><br><span class="line">        for(i = start; i &lt;= end; ++i)//判断是否与前面的重复</span><br><span class="line">        &#123;</span><br><span class="line">            if(s[end+1] == s[i])</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        if(i &lt;= end)//与前面的重复了才会执行，移动到第一个与之重复的位置</span><br><span class="line">        &#123;</span><br><span class="line">            start = i+1;</span><br><span class="line">        &#125;</span><br><span class="line">        end++;//窗口扩大</span><br><span class="line">        len = end - start +1; //计算当前长度</span><br><span class="line">        if(maxLen &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            maxLen = len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :12 ms, 在所有 c 提交中击败了53.58%的用户<br>内存消耗 :7.1 MB, 在所有 c 提交中击败了82.26%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode字符串</category>
        <category>滑动窗口</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>中等</tag>
        <tag>字符串</tag>
        <tag>字符串的操作</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2019/11/11/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>遍历整个数组，两两相加，直到找到答案，构建动态链表存储结果并返回，否则返回结果为空。</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int* twoSum(int* nums, int numsSize, int target, int* returnSize)&#123;</span><br><span class="line">    int i,j;</span><br><span class="line">    int* result = NULL;</span><br><span class="line">    if(nums == NULL) //判断传来的数组是否为空</span><br><span class="line">    &#123;</span><br><span class="line">        //*returnSize = 0;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i = 0; i &lt; numsSize-1; ++i) //遍历整个数组，两两相加</span><br><span class="line">    &#123;</span><br><span class="line">        for(j = i+1; j &lt; numsSize; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            if(nums[i] + nums[j] == target)</span><br><span class="line">            &#123;</span><br><span class="line">                result = (int*) malloc (sizeof(int)*2);</span><br><span class="line">                result[0] = i;</span><br><span class="line">                result[1] = j;</span><br><span class="line">                *returnSize = 2;</span><br><span class="line">                return result; //如果找到 就将结果返回</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result; //如果没有找到 就返回空的result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :160 ms, 在所有 c 提交中击败了87.44%的用户<br>内存消耗 :7.6 MB, 在所有 c 提交中击败了53.48%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode数组</category>
        <category>遍历</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>数组</tag>
        <tag>简单</tag>
        <tag>遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>先序遍历构建二叉树</title>
    <url>/2019/11/10/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h3 id="先序遍历构造二叉树"><a href="#先序遍历构造二叉树" class="headerlink" title="先序遍历构造二叉树"></a>先序遍历构造二叉树</h3><p>返回与给定先序遍历 preorder 相匹配的二叉搜索树（binary search tree）的根结点。</p>
<p>(回想一下，二叉搜索树是二叉树的一种，其每个节点都满足以下规则，对于<code>node.left</code> 的任何后代，值总 <code>&lt; node.val</code>，而 <code>node.right</code> 的任何后代，值总<code>&gt; node.val</code>。此外，先序遍历首先显示节点的值，然后遍历 <code>node.left</code>，接着遍历 <code>node.right</code>。）</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：[8,5,1,7,10,12]</span><br><span class="line">输出：[8,5,10,1,7,null,12]</span><br></pre></td></tr></table></figure>
<p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8ta7z9iwqj30ge0aqdgf.jpg" alt="示意图"></p>
<p>提示：<br><code>1 &lt;= preorder.length &lt;= 100</code><br>先序<code>preorder</code> 中的值是不同的。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/construct-binary-search-tree-from-preorder-traversal</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>构建二叉树，如果根节点为空，则根结点的值为要插入的值，并将其左右子树置为空，如果要插入的结点值比根节点值大，则在右子树中调用插入结点的方法，反之在左子树中调用这个插入结点的函数。<br>使用<code>for</code>循环，依次传递要插入的结点。利用循环与递归实现先序遍历构造二叉树</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct TreeNode *left;</span><br><span class="line"> *     struct TreeNode *right;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">struct TreeNode* add(struct TreeNode* root, int num)</span><br><span class="line">&#123;</span><br><span class="line">    if(root == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        root = (struct TreeNode*)malloc(sizeof(struct TreeNode));</span><br><span class="line">        root-&gt;val = num;</span><br><span class="line">        root-&gt;left = NULL;</span><br><span class="line">        root-&gt;right = NULL;</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">    if(root-&gt;val &gt; num)</span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;left = add(root-&gt;left,num);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;right = add(root-&gt;right,num);   </span><br><span class="line">    &#125; </span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct TreeNode* bstFromPreorder(int* preorder, int preorderSize)&#123;</span><br><span class="line">    struct TreeNode* root = NULL;</span><br><span class="line">    for(int i = 0; i &lt; preorderSize; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        root = add(root,preorder[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :0 ms, 在所有 c 提交中击败了100.00%的用户<br>内存消耗 :9.5 MB, 在所有 c 提交中击败了9.09%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode二叉树</category>
        <category>递归</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>二叉树</tag>
        <tag>递归</tag>
        <tag>简单</tag>
        <tag>构建二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>如何上传文件夹下多个文件</title>
    <url>/2019/11/09/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="如何上传文件夹下多个文件"><a href="#如何上传文件夹下多个文件" class="headerlink" title="如何上传文件夹下多个文件"></a>如何上传文件夹下多个文件</h3><ol>
<li>进入git项目的本地文件夹，将自己的项目复制到这个git 文件夹，查看状态，提交所有的新文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status </span><br><span class="line">git add -A</span><br><span class="line">git commit -a -m&quot;first commit&quot;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>上传更新到git 版本库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>注：<code>git add</code>上传本地项目所有变化的命令三种有<code>git add -A</code>、<code>git add -u</code>、<code>git add</code>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add -A  提交所有变化</span><br><span class="line">git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</span><br><span class="line">git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>小技巧</tag>
        <tag>上传</tag>
      </tags>
  </entry>
  <entry>
    <title>平衡二叉树</title>
    <url>/2019/11/09/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<blockquote>
<p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</p>
</blockquote>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定二叉树 [3,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br></pre></td></tr></table></figure>
<p>返回 true 。</p>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定二叉树 [1,2,2,3,3,null,null,4,4]</span><br><span class="line"></span><br><span class="line">       1</span><br><span class="line">      / \</span><br><span class="line">     2   2</span><br><span class="line">    / \</span><br><span class="line">   3   3</span><br><span class="line">  / \</span><br><span class="line"> 4   4</span><br></pre></td></tr></table></figure>
<p>返回 false 。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/balanced-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/balanced-binary-tree</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>使用递归完成，分别获取左子树与右子树的高度，求左子树减去右子树的绝对值，如果大于一则一直返回 -1 ， -1表示这棵树已经失去平衡了。</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int balance(struct TreeNode* root)&#123;</span><br><span class="line">    if(root == NULL)</span><br><span class="line">        return 0;</span><br><span class="line">    int left = balance(root-&gt;left); //left表示左子树的高度</span><br><span class="line">    if(left == -1)</span><br><span class="line">        return -1;</span><br><span class="line">    int right = balance(root-&gt;right);// right表示右子树的高度</span><br><span class="line">    if(right == -1)</span><br><span class="line">        return -1;</span><br><span class="line">    if(abs(left - right) &gt; 1) //-1 用来表示已经产生不平衡了</span><br><span class="line">        return -1;</span><br><span class="line">    return (left &gt; right ? left : right) + 1;</span><br><span class="line">&#125;</span><br><span class="line">bool isBalanced(struct TreeNode* root) &#123;</span><br><span class="line">    return balance(root) != -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :16 ms, 在所有 c 提交中击败了51.56%的用户<br>内存消耗 :10.2 MB, 在所有 c 提交中击败了100.00%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode二叉树</category>
        <category>递归</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>二叉树</tag>
        <tag>递归</tag>
        <tag>简单</tag>
        <tag>平衡二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的中序遍历</title>
    <url>/2019/11/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h3 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h3><p>给定一个二叉树，返回它的中序 遍历。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">输出: [1,3,2]</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-inorder-traversal</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用递归，根据中序遍历的规则，先访问左子树，再访问根节点，最后是右子树。创建一个动态链表用来记录遍历的节点。注意调用函数时传的参数。</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void inorderTravel(struct TreeNode* root,int *result,int *rSize)</span><br><span class="line">&#123;</span><br><span class="line">    if(!root)</span><br><span class="line">        return ;</span><br><span class="line">    inorderTravel(root-&gt;left, result, rSize);</span><br><span class="line">    result[*rSize] = root-&gt;val;</span><br><span class="line">    ++(*rSize);</span><br><span class="line">    inorderTravel(root-&gt;right, result, rSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* inorderTraversal(struct TreeNode* root, int* returnSize)&#123;</span><br><span class="line">    int *result = (int*) malloc (sizeof(int)*1000);</span><br><span class="line">    int rSize = 0;</span><br><span class="line">    inorderTravel(root, result, &amp;rSize);</span><br><span class="line">    *returnSize = rSize;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了71.25%的用户<br>内存消耗 :7.4 MB, 在所有 c 提交中击败了90.51%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode二叉树</category>
        <category>递归</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>二叉树</tag>
        <tag>中等</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的后序遍历</title>
    <url>/2019/11/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h3 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h3><p>给定一个二叉树，返回它的 后序 遍历。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [3,2,1]</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-postorder-traversal</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用递归，根据后序遍历的规则，先访问左子树，在访问右子树，最后是根节点。创建一个动态链表用来记录遍历的节点。注意调用函数时传的参数。</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void postorderTravel(struct TreeNode* root, int * result, int *rSize)</span><br><span class="line">&#123;</span><br><span class="line">    if(!root)</span><br><span class="line">        return ;</span><br><span class="line">    postorderTravel(root-&gt;left, result, rSize);</span><br><span class="line">    postorderTravel(root-&gt;right, result, rSize);</span><br><span class="line">    result[*rSize] = root-&gt;val;</span><br><span class="line">    ++(*rSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* postorderTraversal(struct TreeNode* root, int* returnSize)&#123;</span><br><span class="line">    int *result = (int*)malloc(sizeof(int)*1000);</span><br><span class="line">    int rSize = 0;</span><br><span class="line">    postorderTravel(root, result, &amp;rSize);</span><br><span class="line">    * returnSize = rSize;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了74.30%的用户<br>内存消耗 :7.4 MB, 在所有 c 提交中击败了84.62%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode二叉树</category>
        <category>递归</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>二叉树</tag>
        <tag>中等</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>反转链表</title>
    <url>/2019/11/07/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><p>反转一个单链表。<br>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>运用递归，如果传入的是空链表返回空链表，</p>
<h4 id="完整代码（一）"><a href="#完整代码（一）" class="headerlink" title="完整代码（一）"></a>完整代码（一）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    if (head == NULL)</span><br><span class="line">        return NULL;</span><br><span class="line">    if (head -&gt; next == NULL)</span><br><span class="line">        return head;</span><br><span class="line">    struct ListNode *newHead = reverseList(head -&gt; next);</span><br><span class="line">    head -&gt; next -&gt; next = head;</span><br><span class="line">    head -&gt; next = NULL;</span><br><span class="line">    return newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了92.62%的用户<br>内存消耗 :7.6 MB, 在所有 c 提交中击败了12.47%的用户</p>
</blockquote>
<h4 id="完整代码（二）"><a href="#完整代码（二）" class="headerlink" title="完整代码（二）"></a>完整代码（二）</h4><p>在链表元素个数&gt;1的情况下，先将链表的前两个结点反转，再将后面剩余的结点逐个添加到首端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    if (head == NULL || head -&gt; next == NULL)//空链表或只有一个结点的链表</span><br><span class="line">        return head;</span><br><span class="line">    struct ListNode *p = head -&gt; next, *q = head -&gt; next -&gt; next, *t;//q从第3个结点开始，t为q的下一个结点，防止断链</span><br><span class="line"></span><br><span class="line">    p -&gt; next = head;</span><br><span class="line">    head -&gt; next = NULL;//将链表的前两个结点反转，为后面在头部逐个添加结点做准备</span><br><span class="line">    while (q)&#123;</span><br><span class="line">        t = q -&gt; next;//t指向q的下一个结点</span><br><span class="line">        q -&gt; next = p;//q连上p</span><br><span class="line">        p = q;//p指向其前一个结点（向前移动一位）</span><br><span class="line">        q = t;//q向后移动</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了92.62%的用户<br>内存消耗 :7.6 MB, 在所有 c 提交中击败了34.26%的用户</p>
</blockquote>
<h4 id="完整代码（三）"><a href="#完整代码（三）" class="headerlink" title="完整代码（三）"></a>完整代码（三）</h4><p>在链表元素个数&gt;1的情况下，先将链表的前两个结点反转，再将后面剩余的结点逐个添加到首端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">truct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    struct ListNode *pre = NULL, *nex;//pre表示新表的首结点，初始化为NULL,使新表尾端指向空，nex记录顺序遍历的下一结点</span><br><span class="line">    while (head)&#123;</span><br><span class="line">        nex = head -&gt; next;//记录下一结点</span><br><span class="line">        head -&gt; next = pre;//当前遍历的结点连接pre</span><br><span class="line">        pre = head;//pre指向当前结点，当前结点成为新表的首结点</span><br><span class="line">        head = nex;//指向当前结点下一结点，所以nex的作用在于辅助遍历，防止断链</span><br><span class="line">    &#125;</span><br><span class="line">    return pre;//返回新表首结点</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了92.62%的用户<br>内存消耗 :7.4 MB, 在所有 c 提交中击败了72.76%的用户</p>
</blockquote>
<h4 id="完整代码（四）"><a href="#完整代码（四）" class="headerlink" title="完整代码（四）"></a>完整代码（四）</h4><p>思路：第2个节点到第n个节点，依次逐节点插入到第1个节点(head节点)之后，(n-1)次这样的操作结束之后将首节点挪到新表的表尾即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    if (head == NULL || head -&gt; next == NULL)</span><br><span class="line">        return head;</span><br><span class="line">    struct ListNode *p = head -&gt; next, *q;</span><br><span class="line"></span><br><span class="line">    while (p -&gt; next != NULL)&#123;</span><br><span class="line">        q = p -&gt; next;</span><br><span class="line">        p -&gt; next = q -&gt; next;</span><br><span class="line">        q -&gt; next = head -&gt; next;</span><br><span class="line">        head -&gt; next = q;</span><br><span class="line">    &#125;</span><br><span class="line">    p -&gt; next = head;//相当于成环  </span><br><span class="line">    head = p -&gt; next -&gt; next;//新head变为原head的next  </span><br><span class="line">    p -&gt; next -&gt; next = NULL;//断掉环</span><br><span class="line"></span><br><span class="line">    return head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :8 ms, 在所有 c 提交中击败了55.66%的用户<br>内存消耗 :7.7 MB, 在所有 c 提交中击败了9.32%的用户</p>
</blockquote>
<h4 id="完整代码（五）"><a href="#完整代码（五）" class="headerlink" title="完整代码（五）"></a>完整代码（五）</h4><p>思路：第2个节点到第n个节点，依次逐节点插入到第1个节点(head节点)之后，(n-1)次这样的操作结束之后将首节点挪到新表的表尾即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct ListNode* reverseList(struct ListNode* head)&#123;</span><br><span class="line">    if (head == NULL || head -&gt; next == NULL)</span><br><span class="line">        return head;</span><br><span class="line">    struct ListNode *front = (struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">    front -&gt; next = head;</span><br><span class="line">    struct ListNode *tail = front -&gt; next;</span><br><span class="line">    struct ListNode *t;</span><br><span class="line">    while (tail -&gt; next)&#123;</span><br><span class="line">        t = tail -&gt; next;</span><br><span class="line">        tail -&gt; next = t -&gt; next;</span><br><span class="line">        t -&gt; next = front -&gt; next;</span><br><span class="line">        front -&gt; next = t;</span><br><span class="line">    &#125;</span><br><span class="line">    return front -&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :8 ms, 在所有 c 提交中击败了55.66%的用户<br>内存消耗 :7.6 MB, 在所有 c 提交中击败了32.45%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode链表</category>
        <category>递归</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>Leetcode</tag>
        <tag>递归</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的前序遍历</title>
    <url>/2019/11/06/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h3 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h3><p>给定一个二叉树，返回它的 前序 遍历。</p>
<p> 示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [1,2,3]</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-preorder-traversal</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用递归实现，思路很简单，获取根节点的值并存储，递归调用遍历左子树，然后递归调用遍历右子树，但是对于我来说，将想法转换为代码有些困难，大家直接看代码吧！</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void preorderTravel(struct TreeNode* root, int* result, int *rSize)</span><br><span class="line">&#123;</span><br><span class="line">    if(!root)</span><br><span class="line">        return;</span><br><span class="line">    result [*rSize] = root -&gt; val;</span><br><span class="line">    ++(*rSize);</span><br><span class="line">    preorderTravel(root-&gt;left, result, rSize);</span><br><span class="line">    preorderTravel(root-&gt;right, result, rSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* preorderTraversal(struct TreeNode* root, int* returnSize)&#123;</span><br><span class="line">    int *result = (int *)malloc(sizeof(int)*100);//为结果开辟存储空间</span><br><span class="line">    int rSize = 0;</span><br><span class="line">    preorderTravel(root, result, &amp;rSize);</span><br><span class="line">    * returnSize = rSize;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>感谢<strong>sfas</strong>提供代码参考</p>
</blockquote>
<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了73.21% 的用户<br>内存消耗 :7.2 MB, 在所有 c 提交中击败了99.14%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode二叉树</category>
        <category>递归</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>二叉树</tag>
        <tag>中等</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>各位相加</title>
    <url>/2019/11/05/%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h3 id="各位相加"><a href="#各位相加" class="headerlink" title="各位相加"></a>各位相加</h3><p>给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 38</span><br><span class="line">输出: 2 </span><br><span class="line">解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。</span><br></pre></td></tr></table></figure>
<p>进阶:<br>你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-digits" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-digits</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们可以使用循环依次获取到这个数字 num 的各个位置的数字，并将其相加，如果相加不是个位数，我们就递归调用这个函数</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int addDigits(int num)&#123;</span><br><span class="line">    int k = 0; //表示各个位置上数字之和</span><br><span class="line">    while(num != 0)//求出各个位置上的数字并求和</span><br><span class="line">    &#123;</span><br><span class="line">        k = k + num % 10; </span><br><span class="line">        num = num/10; </span><br><span class="line">    &#125;</span><br><span class="line">    if(k / 10 != 0)//判断各个位置上数字是否为个位数</span><br><span class="line">        return addDigits(k);</span><br><span class="line">    return k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了76.94% 的用户<br>内存消耗 :6.6 MB, 在所有 c 提交中击败了55.62%的用户</p>
</blockquote>
<h5 id="进阶-你可以不使用循环或者递归，且在-O-1-时间复杂度内解决这个问题吗？"><a href="#进阶-你可以不使用循环或者递归，且在-O-1-时间复杂度内解决这个问题吗？" class="headerlink" title="进阶:你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？"></a>进阶:你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？</h5><p>在Leetcode的题解区 看到了一位大神的实现方法，一行代码解决问题,大致思路是这样的</p>
<blockquote>
<p>时间复杂度为O(1)的解法：<br>    除个位外，每一位上的值都是通过(9+1)进位的过程得到的，想一下拨算盘进位<br>    把整数n看成n样物品，原本是以10个1份打包的，现在从这些10个1份打包好的里面，拿出1个，让它们以9个为1份打包。<br>    这样就出现了两部分的东西：<br>        原本10个现在9个1份的，打包好的物品，这些，我们不用管<br>        零散的物品，它们还可以分成：<br>            从原来打包的里面拿出来的物品，它们的总和 =》 原来打包好的份数 =》 10进制进位的次数 =》 10进制下，除个位外其他位上的值的总和<br>            以10个为1份打包时，打不进去的零散物品 =》 10进制个位上的值<br>    如上零散物品的总数，就是第一次处理num后得到的累加值<br>    如果这个累加值&gt;9，那么如题就还需要将各个位上的值再相加，直到结果为个位数为止。也就意味着还需要来一遍如上的过程。<br>    那么按照如上的思路，似乎可以通过n % 9得到最后的值<br>    但是有1个关键的问题，如果num是9的倍数，那么就不适用上述逻辑。原本我是想得到n被打包成10个1份的份数+打不进10个1份的散落个数的和。通过与9取模，去获得那个不能整除的1，作为计算份数的方式，但是如果可以被9整除，我就无法得到那个1，也得不到个位上的数。<br>    所以需要做一下特殊处理，(num - 1) % 9 + 1<br>    可以这么做的原因：原本可以被完美分成9个为一份的n样物品，我故意去掉一个，那么就又可以回到上述逻辑中去得到我要的n被打包成10个一份的份数+打不进10个一份的散落个数的和。而这个减去的1就相当于从，在10个1份打包的时候散落的个数中借走的，本来就不影响原来10个1份打包的份数，先拿走再放回来，都只影响散落的个数，所以没有关系。</p>
</blockquote>
<p>作者：liveforexperience</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int addDigits(int num)&#123;</span><br><span class="line">    return 1 + (num - 1) % 9;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :0 ms, 在所有 c 提交中击败了100.00% 的用户<br>内存消耗 :6.8 MB, 在所有 c 提交中击败了7.69%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode字符串</category>
        <category>递归</category>
        <category>循环</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>递归</tag>
        <tag>数组</tag>
        <tag>简单</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树中第K小的元素</title>
    <url>/2019/11/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h3 id="二叉搜索树中第K小的元素"><a href="#二叉搜索树中第K小的元素" class="headerlink" title="二叉搜索树中第K小的元素"></a>二叉搜索树中第K小的元素</h3><p>给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。</p>
<p>说明：<br>你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root = [3,1,4,null,2], k = 1</span><br><span class="line">   3</span><br><span class="line">  / \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: root = [5,3,6,2,4,null,null,1], k = 3</span><br><span class="line">       5</span><br><span class="line">      / \</span><br><span class="line">     3   6</span><br><span class="line">    / \</span><br><span class="line">   2   4</span><br><span class="line">  /</span><br><span class="line"> 1</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst" target="_blank" rel="noopener">https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>采用二叉排序数的中序遍历，返回第k个值就好</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * struct TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct TreeNode *left;</span><br><span class="line"> *     struct TreeNode *right;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">int find(struct TreeNode *root, int k, int *ans, bool *found) &#123;</span><br><span class="line">    if (*found) </span><br><span class="line">        return 0;</span><br><span class="line">    int left = root-&gt;left ? find(root-&gt;left, k, ans, found) : 0;</span><br><span class="line">    if (left == k-1) &#123;</span><br><span class="line">        *ans = root-&gt;val;</span><br><span class="line">        *found = true;</span><br><span class="line">    &#125;</span><br><span class="line">    int right = root-&gt;right ? find(root-&gt;right, k - left - 1, ans, found) : 0;</span><br><span class="line">     return  left+right+1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int kthSmallest(struct TreeNode* root, int k)&#123;</span><br><span class="line">    int ans;</span><br><span class="line">    bool found = false;</span><br><span class="line">    if (root) </span><br><span class="line">        find(root, k, &amp;ans, &amp;found);</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :12 ms, 在所有 c 提交中击败了95.66%的用户<br>内存消耗 :11.5 MB, 在所有 c 提交中击败了100.00%的用户</p>
</blockquote>
<h4 id="这个题没有理解很透彻，在理解理解递归调用"><a href="#这个题没有理解很透彻，在理解理解递归调用" class="headerlink" title="这个题没有理解很透彻，在理解理解递归调用"></a>这个题没有理解很透彻，在理解理解递归调用</h4>]]></content>
      <categories>
        <category>Leetcode二叉树</category>
        <category>中等</category>
        <category>递归</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>二叉树</tag>
        <tag>中等</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>滑动窗口最大值</title>
    <url>/2019/11/03/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    <content><![CDATA[<h3 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h3><p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>
<p>返回滑动窗口中的最大值。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3</span><br><span class="line">输出: [3,3,5,5,6,7] </span><br><span class="line">解释: </span><br><span class="line"></span><br><span class="line">  滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/sliding-window-maximum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sliding-window-maximum</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>有两种解题方法</p>
<ol>
<li>一种是每k个元素进行比较，创建一个链表将最大值输出</li>
<li>第二种是创建一个双端链表，将元素从队尾入队，如果后一个节点元素数值比前一个大则前一个数值移除，如果比前一个结点元素数值小，则入队。这样就能保证队列的第一个元素为当前k个数值中最大的<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8l7raet5lj30lp08y0tt.jpg" alt="henbang"><br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8l7vawonpj30j008q0tj.jpg" alt=""></li>
</ol>
<h4 id="第一种想法完整代码如下"><a href="#第一种想法完整代码如下" class="headerlink" title="第一种想法完整代码如下"></a>第一种想法完整代码如下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Note: The returned array must be malloced, assume caller calls free().</span><br><span class="line"> */</span><br><span class="line">/*</span><br><span class="line">    maxInk()用于比较k个数值中最大值</span><br><span class="line">*/</span><br><span class="line">int maxInk(int *nums,int k)</span><br><span class="line">&#123;</span><br><span class="line">    int max=nums[0];</span><br><span class="line">    int i;</span><br><span class="line">    for(i = 0; i &lt; k; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(nums[i] &gt; max)</span><br><span class="line">            max = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int end = numsSize - k;</span><br><span class="line">    int rsize = numsSize - k + 1;</span><br><span class="line">    if(numsSize == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        * returnSize = 0;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    * returnSize = rsize;</span><br><span class="line">    int *r = (int *)malloc(sizeof(int)*rsize);</span><br><span class="line">    memset(r,0,sizeof(int)*rsize);</span><br><span class="line">    </span><br><span class="line">    for(i = 0; i&lt;= end; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        r[i] = maxInk(nums+i,k);</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行用时 :144 ms, 在所有 c 提交中击败了40.05% 的用户<br>内存消耗 :15.9 MB, 在所有 c 提交中击败了18.18%的用户</p>
</blockquote>
<h4 id="第二种想法完整代码如下"><a href="#第二种想法完整代码如下" class="headerlink" title="第二种想法完整代码如下"></a>第二种想法完整代码如下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">	int *qdata;</span><br><span class="line">	int head;</span><br><span class="line">	int tail;</span><br><span class="line">	int qlen;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line">void queue_init(Queue* q, int n)</span><br><span class="line">&#123;</span><br><span class="line">	if(n&gt;=0)</span><br><span class="line">	&#123;</span><br><span class="line">		q-&gt;qlen = n+1;</span><br><span class="line">		q-&gt;qdata = (int *)malloc(sizeof(int) *q-&gt;qlen);</span><br><span class="line">		q-&gt;head = 0;</span><br><span class="line">		q-&gt;tail = 0;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void queue_destroy(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">	free(q-&gt;qdata);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int queue_is_full(Queue* q)</span><br><span class="line">&#123;</span><br><span class="line">	if((q-&gt;tail+1)%q-&gt;qlen == q-&gt;head) return 1;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int queue_is_empty(Queue*q )</span><br><span class="line">&#123;</span><br><span class="line">	return q-&gt;head == q-&gt;tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void queue_add_tail(Queue *q, int e)</span><br><span class="line">&#123;</span><br><span class="line">	if(!queue_is_full(q))</span><br><span class="line">	&#123;</span><br><span class="line">		q-&gt;qdata[q-&gt;tail] = e;</span><br><span class="line">		q-&gt;tail = (q-&gt;tail+1)%q-&gt;qlen;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%d not add, queue is full\n&quot;, e);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int queue_pull_head(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">	if(!queue_is_empty(q))</span><br><span class="line">	&#123;</span><br><span class="line">		int r = q-&gt;qdata[q-&gt;head];</span><br><span class="line">		q-&gt;head = (q-&gt;head+1)%q-&gt;qlen;</span><br><span class="line">		return r;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;not pull, queue is empty\n&quot;);</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int queue_peek_head(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">	if(!queue_is_empty(q))</span><br><span class="line">		return q-&gt;qdata[q-&gt;head];</span><br><span class="line">	return -1;</span><br><span class="line">&#125;</span><br><span class="line">int queue_pull_tail(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">    int r = q-&gt;qdata[(q-&gt;tail-1+q-&gt;qlen)%q-&gt;qlen];</span><br><span class="line">    if(!queue_is_empty(q))</span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;tail = (q-&gt;tail-1+q-&gt;qlen)%q-&gt;qlen;</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int queue_peek_tail(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">    if(!queue_is_empty(q))</span><br><span class="line">    &#123;</span><br><span class="line">        return q-&gt;qdata[(q-&gt;tail-1+q-&gt;qlen)%q-&gt;qlen];</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line">void queue_print(Queue *q)</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">    printf(&quot;in queue: &quot;);</span><br><span class="line">	for(i = q-&gt;head; i != q-&gt;tail; i= (i+1)%q-&gt;qlen)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%d &quot;,q-&gt;qdata[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void queue_reflact(Queue *q, int *nums)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    printf(&quot;in queue: &quot;);</span><br><span class="line">	for(i = q-&gt;head; i != q-&gt;tail; i= (i+1)%q-&gt;qlen)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%d &quot;,nums[q-&gt;qdata[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void pr(int* nums, int numsSize)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    printf(&quot;result: &quot;);</span><br><span class="line">    for(i=0; i&lt;numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d &quot;,nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize)&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int j=0;</span><br><span class="line">    </span><br><span class="line">    int rsize = numsSize -k +1; </span><br><span class="line">    if(numsSize==0)</span><br><span class="line">    &#123;</span><br><span class="line">        *returnSize = 0;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue qnode;</span><br><span class="line">    Queue* q = &amp;qnode;</span><br><span class="line">    queue_init(q, k);</span><br><span class="line">    </span><br><span class="line">    *returnSize = rsize;</span><br><span class="line">    int *r = (int *)malloc(sizeof(int)*rsize);</span><br><span class="line">    *returnSize = rsize;</span><br><span class="line">    memset(r, 0, sizeof(int)*rsize);</span><br><span class="line">     </span><br><span class="line">    for(i=0; i&lt;numsSize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(queue_is_empty(q))</span><br><span class="line">        &#123; </span><br><span class="line">            queue_add_tail(q, i);</span><br><span class="line">            goto juge;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        if(queue_peek_head(q)&lt;=i-k)</span><br><span class="line">        &#123;</span><br><span class="line">            queue_pull_head(q);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while(!queue_is_empty(q) &amp;&amp; nums[queue_peek_tail(q)] &lt; nums[i])</span><br><span class="line">        &#123;</span><br><span class="line">             queue_pull_tail(q);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        queue_add_tail(q, i);</span><br><span class="line"> </span><br><span class="line">        juge:if(i-k+1&gt;=0)&#123;</span><br><span class="line">            r[j++] = nums[queue_peek_head(q)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行用时 :76 ms, 在所有 c 提交中击败了84.56% 的用户<br>内存消耗 :16.1 MB, 在所有 c 提交中击败了9.09%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode队列</category>
        <category>困难</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>困难</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>每日温度</title>
    <url>/2019/11/02/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</url>
    <content><![CDATA[<h3 id="每日温度"><a href="#每日温度" class="headerlink" title="每日温度"></a>每日温度</h3><p>根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用?0 来代替。</p>
<p>例如，给定一个列表?<code>temperatures = [73, 74, 75, 71, 69, 72, 76, 73]</code>，你的输出应该是?<code>[1, 1, 4, 2, 1, 1, 0, 0]</code>。</p>
<p>提示：气温 列表长度的范围是?<code>[1, 30000]</code>。每个气温的值的均为华氏度，都是在?<code>[30, 100]?</code>范围内的整数。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/daily-temperatures" target="_blank" rel="noopener">https://leetcode-cn.com/problems/daily-temperatures</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>创建一个栈，把第一天的温度放进栈内，第二天与之比较，如果比第一天温度高，则应该输出1，如果比第一天温度低，就把这个温度值也入栈，继续下一个数值进行比较，如果温度比第二天高，则对应的第二天输出的应该为1，第二天的温度值出栈，然后与第一天的进行比较，如果大则第一天的数值出栈，对应输出为2，否则继续下一个元素按照这种方法比较，直到最后一个比较完，栈内还有元素就依次出栈，每个元素对应的输出结果为0.<br><strong>实现过程</strong></p>
<ul>
<li>定义一个栈，并定义栈顶指针top</li>
<li>创建一个链表<code>res</code> 用来存储结果，定义一个 <code>temp</code>用来存储数组下标</li>
<li>核心代码如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(i = 0; i&lt; TSize; ++i)</span><br><span class="line">&#123;</span><br><span class="line">    while(top != -1 &amp;&amp; T[i]&gt;T[stack[top]])</span><br><span class="line">    &#123;</span><br><span class="line">        temp = stack[top];</span><br><span class="line">        top--;//处理下标的距离</span><br><span class="line">        res[temp] = i - temp;</span><br><span class="line">    &#125;</span><br><span class="line">    ++top;//栈空了或者满足递减条件就入站</span><br><span class="line">    stack[top] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="完整代码如下"><a href="#完整代码如下" class="headerlink" title="完整代码如下"></a>完整代码如下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Note: The returned array must be malloced, assume caller calls free().</span><br><span class="line"> */</span><br><span class="line">#define MAX 30000</span><br><span class="line"></span><br><span class="line">int* dailyTemperatures(int* T, int TSize, int* returnSize)&#123;</span><br><span class="line">    int stack[MAX] = &#123;0&#125;;</span><br><span class="line">    int top = -1,i = 0, temp = 0;</span><br><span class="line">    int* res =(int *)malloc(sizeof(int)*TSize);</span><br><span class="line">    memset(res,0,sizeof(int)*TSize);//初始化函数 给res中 sizeof(int)*Tsize个赋值为0</span><br><span class="line">    if(res == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        * returnSize = 0;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i = 0; i&lt; TSize; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        while(top != -1 &amp;&amp; T[i]&gt;T[stack[top]])</span><br><span class="line">        &#123;</span><br><span class="line">            temp = stack[top];</span><br><span class="line">            top--;//处理下标的距离</span><br><span class="line">            res[temp] = i - temp;</span><br><span class="line">        &#125;</span><br><span class="line">        ++top;//栈空了或者满足递减条件就入站</span><br><span class="line">        stack[top] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    * returnSize = TSize;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>执行用时 :232 ms, 在所有?c?提交中击败了53.11%的用户<br>内存消耗 :23.8 MB, 在所有?c?提交中击败了76.47%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode数组</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>中等</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>有效的括号</title>
    <url>/2019/11/01/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>
<p>示例 4:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>
<p>示例 5:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul>
<li>获取要判断的字符串长度，如果字符串为空，返回true 否则返回false</li>
<li>创建一个栈 在字符串中找到 ‘(’ 或者 ‘{‘ 或者 ‘[‘的时候进栈，找到与之匹配的‘)’ 或者 ‘}’ 或者 ‘]’时候出栈 </li>
<li>如何查找是否匹配 写了一个函数 isTrue 用来判断是否匹配<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool isTrue(char a,char b)</span><br><span class="line">&#123;</span><br><span class="line">    if((a == &apos;(&apos; &amp;&amp; b == &apos;)&apos;) || (a == &apos;&#123;&apos; &amp;&amp; b == &apos;&#125;&apos;) ||(a == &apos;[&apos; &amp;&amp; b == &apos;]&apos;))</span><br><span class="line">        return true;</span><br><span class="line">    else </span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>遍历整个字符串，进行对应的出栈和进栈</li>
<li>如果遍历结束，栈为空则表示完全匹配，否则表示不匹配</li>
</ul>
<h4 id="对于这个题的完整代码如下"><a href="#对于这个题的完整代码如下" class="headerlink" title="对于这个题的完整代码如下"></a>对于这个题的完整代码如下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool isTrue(char a,char b)</span><br><span class="line">&#123;</span><br><span class="line">    if((a == &apos;(&apos; &amp;&amp; b == &apos;)&apos;) || (a == &apos;&#123;&apos; &amp;&amp; b == &apos;&#125;&apos;) ||(a == &apos;[&apos; &amp;&amp; b == &apos;]&apos;))</span><br><span class="line">        return true;</span><br><span class="line">    else </span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool isValid(char * s)&#123;</span><br><span class="line">    int top = -1;</span><br><span class="line">    int len=strlen(s);</span><br><span class="line">    if(len == 0)</span><br><span class="line">        return true;</span><br><span class="line">    char str[len];</span><br><span class="line">    int i=0;</span><br><span class="line">    for(i=0; i&lt;len ;++i)</span><br><span class="line">    &#123;</span><br><span class="line">         if(top==-1 || !(isTrue(str[top],s[i])))</span><br><span class="line">        &#123;</span><br><span class="line">            ++top;</span><br><span class="line">            str[top] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        else if(isTrue(str[top],s[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            --top;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(top == -1)</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>执行用时 :4 ms, 在所有 c 提交中击败了69.12%的用户<br>内存消耗 :6.9 MB, 在所有 c 提交中击败了73.49%的用户</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode简单</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>数组</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title>有效的字母异位词</title>
    <url>/2019/11/01/%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    <content><![CDATA[<h3 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h3><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p>
<p>示例?1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure>
<p>说明:<br>你可以假设字符串只包含小写字母。</p>
<p>进阶:<br>如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-anagram" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-anagram</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>解决字符串的问题，英文字母一共才26个，我们可以创建两个数组a[],b[]，数组中的元素分别对应字母”a,b,c….z“，遍历数组 s 数组s中每个字符对应的数组元素a[i]++，同理遍历数组 t 数组t中每个字符对应的数组元素b[i]++,然后比较数组a[]与数组b[],如果数组一致则<code>return true</code> 否则<code>return false</code></p>
<p>提交的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool isAnagram(char * s, char * t)&#123;</span><br><span class="line">    int a[26]=&#123;0&#125;;</span><br><span class="line">    int b[26]=&#123;0&#125;;</span><br><span class="line">    int n;</span><br><span class="line">    int i;</span><br><span class="line">    for(i=0;i&lt;strlen(s);++i)&#123;</span><br><span class="line">        if(s[i]&gt;=97 &amp;&amp; s[i]&lt;=123)</span><br><span class="line">        &#123;</span><br><span class="line">            n=s[i]-97;</span><br><span class="line">            a[n]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0 ;i&lt;strlen(t); ++i)&#123;</span><br><span class="line">        if(t[i]&gt;=97 &amp;&amp; t[i]&lt;=123)</span><br><span class="line">         &#123;</span><br><span class="line">            n=t[i]-97;</span><br><span class="line">            b[n]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;26;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        if(a[i]!=b[i])</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行用时：344 ms<br>仅仅至战胜了5.12%的c提交记录</p>
</blockquote>
<p><strong>加油！每天做点数据结构练习!</strong></p>
]]></content>
      <categories>
        <category>Leetcode字符串</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>数组</tag>
        <tag>简单</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建个人博客 使用Hexo（一）</title>
    <url>/2019/11/01/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%20%E4%BD%BF%E7%94%A8Hexo%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>今天跟大家分享一篇文章，教大家如何一步步使用 GitHub 搭建出自己专属的个人博客！弄个博客网站不是要有服务器，数据库，域名的嘛？没事，如果都没有，我们依然可以搭建一个博客。这里我拿Win10系统做演示，对于Mac和Linux系统 基本是一样的</p>
<h4 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h4><p>首先大家需要一个GitHub的账户，GitHub Pages 允许每个账户创建一个名为 {username}.github.io 的仓库，另外它还会自动为这个仓库分配一个 github.io 的二级域名，这就解决了域名的问题，当然如果想要自定义域名的话，也可以支持，我后续会跟大家说的。</p>
<p>所以大家先注册个GitHub账号，我们就正式开始吧！</p>
<h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><ul>
<li><p>去<a href="https://nodejs.org" target="_blank" rel="noopener">官网</a>安装Node.js </p>
</li>
<li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glapfwbwj30oc0eugma.jpg" alt="很棒哈"></p>
</li>
<li><p>下载好后一路 <strong>next</strong> 就好</p>
</li>
</ul>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ul>
<li>新建一个文件夹，比如我这里建了  blog  文件  </li>
<li>我们来看一下 Node.js是否安装成功</li>
<li><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glapmae5j30bq057t8l.jpg" alt="很棒哈"></li>
</ul>
<ul>
<li><p>由于国内镜像源速度不是很好，我们先来安装个cnpm提高速度，以后下载什么东西都用cnpm</p>
</li>
<li><p>执行如下命令 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>
<li><p>等待安装完成</p>
</li>
<li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glappw47j30mm073jre.jpg" alt="很棒哈"></p>
</li>
<li><p>安装完成看一下他的版本</p>
</li>
<li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glapve37j30n00act8y.jpg" alt="很棒哈"></p>
</li>
<li><p><strong>安装Hexo</strong> 执行如下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaq20hwj30nf0k90tv.jpg" alt="很棒哈"></p>
</li>
<li><p>使用如下命令检测是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></li>
<li><p><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaq8xrzj308l082wed.jpg" alt="很棒哈"></p>
</li>
<li><p>安装完毕之后，确保环境变量配置好，能正常使用 hexo 命令。</p>
</li>
<li><p>查看当前路径命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure></li>
<li><p>结果为 我的是存放在D盘blog的文件夹内<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaqe6xej306v03egld.jpg" alt="很棒哈"></p>
</li>
<li><p>然后我们运行命令，这步是关键，主要是建立整个项目，这里我的文件夹名字是blog</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></li>
<li><p>等待下载安装完成，结果如下<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaqlqa8j30n90d2t99.jpg" alt="很棒哈"><br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaqrkauj30oi07jmxf.jpg" alt="很棒哈"></p>
</li>
</ul>
<h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><ul>
<li><p>首先我们调用  Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li>
<li><p>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glaqvv6oj30eq0dtmx8.jpg" alt="很棒哈"><br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glar00z8j30nj06v0su.jpg" alt="很棒哈"></p>
</li>
<li><p>然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<ul>
<li><p>运行结果如下<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glar4s35j30ei01h3ya.jpg" alt="很棒哈"></p>
</li>
<li><p>我们在本地 4000 端口上就可以查看博客站点了，如图所示：<br><img src="http://tva1.sinaimg.cn/large/007X8olVly1g8glarlqx0j31b00s0gyo.jpg" alt="很棒哈"></p>
</li>
<li><p>到这为止我们就已经搭建好 一个博客框架了</p>
</li>
<li><p>记住这三条很常用的命令</p>
<blockquote>
<p>hexo clean #用来清理缓存文件<br>hexo g      #生成文件<br>hexo  s     #运行本地服务器<br>hexo  d   #上传到服务器</p>
</blockquote>
</li>
</ul>
<h4 id="这次我们就先说到这"><a href="#这次我们就先说到这" class="headerlink" title="这次我们就先说到这"></a>这次我们就先说到这</h4><ul>
<li>下一次我再跟大家分享 如何美化我们的博客。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>K个一组翻转链表</title>
    <url>/2019/11/01/K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="K个一组翻转链表"><a href="#K个一组翻转链表" class="headerlink" title="K个一组翻转链表"></a>K个一组翻转链表</h2><p>给你一个链表，每?k?个节点一组进行翻转，请你返回翻转后的链表。</p>
<p>k?是一个正整数，它的值小于或等于链表的长度。</p>
<p>如果节点总数不是?k?的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
<p>示例 :</p>
<p>给定这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5</p>
<p>当?k?= 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5</p>
<p>当?k?= 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p>
<p>说明 :</p>
<p>你的算法只能使用常数的额外空间。<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-nodes-in-k-group</a></p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们可以创建三个指针<code>pre</code>  <code>cur</code>   <code>next</code><br><code>pre</code>  指针指向开始节点，<code>cue</code>指针指向<code>pre</code> 的下一个节点，<code>next</code>指针指向<code>cur</code>指针的下一个节点。<br>每次移动让<code>next = cur-&gt;next</code>节点 <code>cur-&gt;next = pre</code>让cur的指针指向pre ，pre移动到cur的位置，cur移动到next的位置，这样就实现了 链表的反转<br>代码实现如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct ListNode* Myreverse(struct ListNode *head)&#123;</span><br><span class="line">    struct ListNode* next = NULL;</span><br><span class="line">    struct ListNode *pre = NULL;</span><br><span class="line">    struct ListNode *cur = head;</span><br><span class="line">    while(cur != NULL)&#123;</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    return pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="对于这个题的完整代码如下"><a href="#对于这个题的完整代码如下" class="headerlink" title="对于这个题的完整代码如下"></a>对于这个题的完整代码如下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct ListNode* Myreverse(struct ListNode *head);</span><br><span class="line">struct ListNode* reverseKGroup(struct ListNode* head, int k)&#123;</span><br><span class="line">    struct ListNode *cur = head, *start = head, *next = NULL, *result = head;</span><br><span class="line">    struct ListNode *pre = (struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">    int flag = 0;//是否第一次翻转</span><br><span class="line">    pre-&gt;next = head;</span><br><span class="line">    while(cur != NULL)&#123;</span><br><span class="line">        for(int i = 1;(i&lt;k)&amp;&amp;(cur != NULL); i++)&#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        flag++;</span><br><span class="line">        if(cur == NULL) break;</span><br><span class="line">        next = cur-&gt;next;//后继</span><br><span class="line">        cur-&gt;next = NULL;//切断链表进行翻转</span><br><span class="line">        pre-&gt;next = Myreverse(start);</span><br><span class="line">        if (flag == 1) result = pre-&gt;next;</span><br><span class="line">        pre = start;</span><br><span class="line">        start-&gt;next = next;</span><br><span class="line">        cur = next;</span><br><span class="line">        start = next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct ListNode* Myreverse(struct ListNode *head)&#123;</span><br><span class="line">    struct ListNode* next = NULL;</span><br><span class="line">    struct ListNode *pre = NULL;</span><br><span class="line">    struct ListNode *cur = head;</span><br><span class="line">    while(cur != NULL)&#123;</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = pre;</span><br><span class="line">        pre = cur;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    return pre;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行用时：12 ms</p>
</blockquote>
]]></content>
      <categories>
        <category>Leetcode链表</category>
        <category>困难</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>Leetcode</tag>
        <tag>困难</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/2019/10/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h2 id="内容"><a href="#内容" class="headerlink" title=" 内容"></a> 内容</h2><h2 id="是否支持markdown"><a href="#是否支持markdown" class="headerlink" title="是否支持markdown"></a>是否支持markdown</h2><hr>
]]></content>
  </entry>
</search>
